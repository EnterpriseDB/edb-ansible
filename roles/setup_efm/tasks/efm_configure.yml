---
- name: Generate efm encrypted password
  ansible.builtin.shell: |
    {{ efm_bin_path }}/efm encrypt {{ efm_cluster_name }} --from-env
  args:
    executable: /bin/bash
  environment:
    EFMPASS: "{{ pg_efm_user_password }}"
  register: pass_opt
  changed_when: pass_opt.rc == 0
  become: true
  failed_when: "'EFMPASS password not found.' in pass_opt.stdout"

- name: Check if we have efm_witness or not
  ansible.builtin.set_fact:
    efm_witness: "{{ 'true' if ('witness' in group_names) else 'false' }}"

- name: Prepare the necessary parameters when not use_hostname
  ansible.builtin.set_fact:
    efm_node_parameters:
      - {name: db.password.encrypted, value: "{{ pass_opt.stdout }}"}
      - {name: bind.address, value: "{{ hostvars[inventory_hostname].private_ip }}:{{ efm_port }}"}
      - {name: application.name, value: "{{ inventory_hostname }}"}
      - {name: is.witness, value: "{{ efm_witness }}"}
  when: not use_hostname|bool

- name: Prepare the necessary parameters when use_hostname
  ansible.builtin.set_fact:
    efm_node_parameters:
      - {name: db.password.encrypted, value: "{{ pass_opt.stdout }}"}
      - {name: bind.address, value: "{{ inventory_hostname }}:{{ efm_port }}"}
      - {name: application.name, value: "{{ inventory_hostname }}"}
      - {name: is.witness, value: "{{ efm_witness }}"}
  when: use_hostname|bool

- name: Initialize efm_lb_parameters
  ansible.builtin.set_fact:
    efm_lb_parameters: []

- name: Prepare parameters for PgPoolII integration
  ansible.builtin.set_fact:
    efm_lb_parameters:
      - {name: auto.resume.period, value: "5"}
      - {name: script.custom.monitor, value: "{{ efm_bin_path }}/pg_pcp_health.sh"}
      - {name: custom.monitor.interval, value: "5"}
      - {name: custom.monitor.safe.mode, value: "true"}
      - {name: custom.monitor.timeout, value: "10"}
      - {name: detach.on.agent.failure, value: "{{ detach_on_agent_failure }}"}
      - {name: pgpool.enable, value: "{{ efm_pgpool2_integration | lower }}"}
      - {name: pgpool.bin, value: "{{ pgpool2_bin_path }}"}
      - {name: pcp.user, value: "{{ pcp_admin_user }}"}
      - {name: pcp.host, value: "{{ pgpool2_vip }}"}
      - {name: pcp.port, value: "{{ pgpool2_pcp_port }}"}
      - {name: pcp.pass.file, value: "{{ pcp_passfile }}"}
      - {name: script.load.balancer.attach, value: "{{ efm_pgpool2_lb_attach }}"}
      - {name: script.load.balancer.detach, value: "{{ efm_pgpool2_lb_detach }}"}
  when:
    - efm_pgpool2_integration

- name: Prepare final parameters list
  ansible.builtin.set_fact:
    efm_node_parameters: "{{ efm_default_parameters + efm_node_parameters }}"
  when: hostvars[inventory_hostname].upstream_node_private_ip is not defined
        or hostvars[inventory_hostname].upstream_node_private_ip == primary_private_ip

- name: Prepare final parameters list
  ansible.builtin.set_fact:
    efm_node_parameters: "{{ efm_default_parameters + efm_node_parameters + efm_cascaded_replica_param }}"
  when:
    - hostvars[inventory_hostname].upstream_node_private_ip is defined
    - hostvars[inventory_hostname].upstream_node_private_ip != primary_private_ip

- name: Prepare final parameters list
  ansible.builtin.set_fact:
    efm_node_parameters: "{{ efm_node_parameters + efm_physical_slot_param }}"
  when:
    - (pg_version|int > 11 and pg_type == "EPAS") or (pg_version|int > 12 and pg_type == "PG")
    - efm_version|int > 3.10

- name: Add LB configuration to final parameters list
  ansible.builtin.set_fact:
    efm_node_parameters: "{{ efm_node_parameters + efm_lb_parameters }}"
  when:
    - efm_pgpool2_integration

- name: Add eager efm configuration to efm parameters list
  ansible.builtin.set_fact:
    efm_node_parameters: "{{ efm_node_parameters + efm_eager_failover_params }}"
  when:
    - efm_eager_failover|bool
    - efm_install_version|int >= 40

- name: Add user defined efm initialization parameters to efm parameters list
  ansible.builtin.set_fact:
    efm_node_parameters: "{{ efm_node_parameters + efm_init_parameters }}"
  when:
    - efm_init_parameters|length > 0

- name: Build efm_properties_lines
  ansible.builtin.set_fact:
    efm_properties_lines: >
      {{ efm_properties_lines | default([]) + [
          {
            'line': item.name + '=' + item.value | string,
            'regexp': item.name | regex_escape() + '='
          }
      ] }}
  with_items: "{{ efm_node_parameters }}"

- name: Update efm efm.properties file
  edb_devops.edb_postgres.linesinfile:
    path: "{{ efm_properties }}"
    lines: "{{ efm_properties_lines }}"
  become: true
  no_log: "{{ disable_logging }}"
  notify:
    - Force systemd to reread configs after changes

- name: Update pg_service to bind efm_service
  edb_devops.edb_postgres.linesinfile:
    path: "/etc/systemd/system/{{ pg_service }}.service"
    lines:
      - line: "BindsTo={{ efm_service }}.service"
        regexp: "^BindsTo=.*"
        insertafter: "^\\[Unit\\]$"
  become: true
  when:
    - efm_eager_failover|bool
    - ansible_os_family == 'RedHat'
  notify:
    - Force systemd to reread configs after changes

- name: Populate service facts
  ansible.builtin.service_facts:

- name: Cleanup the efm lock file if exists
  ansible.builtin.file:
    path: "{{ edb_efm_lock_file }}"
    state: absent
  when: ansible_facts.services[efm_service + '.service']['state'] != 'running'
  become: true

- name: Start efm service
  ansible.builtin.systemd:
    name: "{{ efm_service }}"
    enabled: true
    state: started
  become: true

- name: Flush handlers
  ansible.builtin.meta: flush_handlers

- name: Reset efm_properties_lines
  ansible.builtin.set_fact:
    efm_properties_lines: []
