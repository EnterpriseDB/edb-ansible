---
- name: Generate efm encrypted password
  shell: |
    {{ efm_bin_path }}/efm encrypt {{ efm_cluster_name }} --from-env
  args:
    executable: /bin/bash
  environment:
    EFMPASS: "{{ pg_efm_user_password }}"
  register: pass_opt
  changed_when: pass_opt.rc == 0
  become: yes
  failed_when: "'EFMPASS password not found.' in pass_opt.stdout"

- name: Check if we have efm_witness or not
  set_fact:
    efm_witness: "{{ 'true' if ('witness' in group_names) else 'false' }}"

- name: Prepare the necessary parameters
  set_fact:
    efm_node_parameters:
        - { name: db.password.encrypted, value: "{{ pass_opt.stdout }}"}
        - { name: bind.address, value: "{{ hostvars[inventory_hostname].private_ip }}:{{ efm_port }}"}
        - { name: application.name, value: "{{ inventory_hostname }}" }
        - { name: is.witness, value: "{{ efm_witness }}" }
  when: not use_hostname

- name: Prepare the necessary parameters
  set_fact:
    efm_node_parameters:
        - { name: db.password.encrypted, value: "{{ pass_opt.stdout }}"}
        - { name: bind.address, value: "{{ inventory_hostname }}:{{ efm_port }}"}
        - { name: application.name, value: "{{ inventory_hostname }}" }
        - { name: is.witness, value: "{{ efm_witness }}" }
  when: use_hostname

- name: Initialize efm_lb_parameters
  set_fact:
    efm_lb_parameters: []

- name: Prepare parameters for PgPoolII integration
  set_fact:
    efm_lb_parameters:
      - {name: script.load.balancer.attach, value: "{{ efm_bin_path }}/pcp_attach_all.sh %h %t"}
      - {name: auto.resume.period, value: "5"}
      - {name: script.custom.monitor, value: "{{ efm_bin_path }}/pg_pcp_health.sh"}
      - {name: custom.monitor.interval, value: "5"}
      - {name: custom.monitor.safe.mode, value: "true"}
      - {name: custom.monitor.timeout, value: "10"}
  when:
    - efm_pgpool2_integration

- name: Prepare final parameters list
  set_fact:
    efm_node_parameters: "{{ efm_default_parameters + efm_node_parameters }}"
  when: hostvars[inventory_hostname].upstream_node_private_ip is not defined
        or hostvars[inventory_hostname].upstream_node_private_ip == primary_private_ip

- name: Prepare final parameters list
  set_fact:
    efm_node_parameters: "{{ efm_default_parameters + efm_node_parameters + efm_cascaded_replica_param }}"
  when:
    - hostvars[inventory_hostname].upstream_node_private_ip is defined
    - hostvars[inventory_hostname].upstream_node_private_ip != primary_private_ip

- name: Prepare final parameters list
  set_fact:
    efm_node_parameters: "{{ efm_node_parameters + efm_physical_slot_param }}"
  when:
    - (pg_version|int > 11 and pg_type == "EPAS") or (pg_version|int > 12 and pg_type == "PG")
    - efm_version|int > 3.10

- name: Add LB configuration to final parameters list
  set_fact:
    efm_node_parameters: "{{ efm_node_parameters + efm_lb_parameters }}"
  when:
    - efm_pgpool2_integration

- name: Add the efm_parameters with initial efm.properties
  set_fact:
    efm_node_parameters: "{{ efm_node_parameters + efm_parameters }}"
  when:
    - not stat_efm_properties.stat.exists
    - efm_parameters|length > 0

- name: Update efm efm.properties file
  lineinfile:
    path: "{{ efm_properties }}"
    regexp: "{{ line_item.name + '=' }}"
    line: "{{ line_item.name + '=' + line_item.value|string }}"
    state: present
  with_items: "{{ efm_node_parameters }}"
  loop_control:
   loop_var: line_item
  become: yes
  no_log: "{{ disable_logging }}"
  register: properties_changes

- name: Populate service facts
  service_facts:

- name: Cleanup the efm lock file if exists
  file:
    path: "{{ edb_efm_lock_file }}"
    state: absent
  when: ansible_facts.services[efm_service + '.service']['state'] != 'running'
  become: yes

- name: Start efm service
  systemd:
    name: "{{ efm_service }}"
    enabled: yes
    state: started
  become: yes

- name: Restart efm service
  systemd:
    name: "{{ efm_service }}"
    enabled: yes
    state: restarted
  become: yes
  when:
    - efm_nodes_update.changed
    - efm_service_file.stat.exists
