---
- name: Set the os variable
  set_fact:
    os: "{{ ansible_distribution }}{{ ansible_distribution_major_version }}"

- name: Check support for Operating System
  fail:
    msg: "Operating System = {{ os }} not supported."
  when: os not in supported_os

- name: Check supported versions for Database engine
  fail:
    msg: "Database Engine Version = {{ pg_version }} not supported.
          Supported versions are {{ supported_pg_version }}"
  when: pg_version|int not in supported_pg_version

- name: Check support for efm
  fail:
    msg: "efm version = {{ efm_version }} not supported.
         Supported versions are {{ supported_efm_version }}"
  when: efm_version | string not in supported_efm_version

- name: Reference variables
  include_vars: "{{ pg_type }}_{{ ansible_os_family }}.yml"

- name: Find the WAL dir source location
  stat:
    path: "{{ pg_data }}/pg_wal"
  register: waldir

- name: Ensure parent WAL dir has correct permissions
  file:
    path: "{{ waldir.stat.lnk_source|dirname }}"
    owner: "{{ pg_owner }}"
  when:
    - waldir is defined
    - waldir.stat.islnk

- name: Gather service facts
  service_facts:

- name: Open EFM TCP port {{ efm_port }}
  ansible.posix.firewalld:
    port: "{{ efm_port }}/tcp"
    permanent: yes
    state: enabled
    immediate: true
  when:
    - ansible_facts.services['firewalld.service'] is defined
    - ansible_facts.services['firewalld.service'].state == 'running'
    - ansible_facts.services['firewalld.service'].status == 'enabled'
  become: yes

- name: Open EFM TCP admin. port {{ efm_admin_port }}
  ansible.posix.firewalld:
    port: "{{ efm_admin_port }}/tcp"
    permanent: yes
    state: enabled
    immediate: true
  when:
    - ansible_facts.services['firewalld.service'] is defined
    - ansible_facts.services['firewalld.service'].state == 'running'
    - ansible_facts.services['firewalld.service'].status == 'enabled'
  become: yes

- name: Gather the cluste_nodes information and efm_install_version
  set_fact:
    pg_cluster_nodes: "{{ lookup('edb_devops.edb_postgres.pg_sr_cluster_nodes', wantlist=True) }}"
    efm_install_version : "{{ efm_version | replace('.','') }}"
  run_once: true

- name: Remove before we start as per force_install
  block:
    - include_tasks: rm_efm_install_config.yml
  become: yes
  when: >
    (force_efm is defined and force_efm)
    or (force_initdb is defined and force_initdb)
    or (force_replication is defined and force_replication)

- name: Prepare efm_nodes_list based on use_hostname
  set_fact:
    efm_nodes_list: "{{ efm_nodes_list + node.inventory_hostname + ':' + efm_port | string + ' ' }}"
  loop: "{{ pg_cluster_nodes }}"
  loop_control:
    loop_var: node
  when: use_hostname
  run_once: true
  no_log: "{{ disable_logging }}"

- name: Prepare efm node list
  set_fact:
    efm_nodes_list: "{{ efm_nodes_list + node.private_ip + ':' + efm_port | string + ' ' }}"
  when:
    - not use_hostname
  loop: "{{ pg_cluster_nodes }}"
  loop_control:
    loop_var: node
  run_once: true
  no_log: "{{ disable_logging }}"

- name: Prepare host ip lists based on allow_node_ips
  include_tasks: prepare_hba_value_list.yml

- name: Get the primary information
  set_fact:
    primary_public_ip: "{{ node.ansible_host }}"
    primary_private_ip: "{{ node.private_ip }}"
  when: node.node_type == 'primary'
  loop: "{{ pg_cluster_nodes }}"
  loop_control:
    loop_var: node
  run_once: true
  no_log: "{{ disable_logging }}"

- name: Ensure we have efm user in primary database
  import_tasks: create_efm_user.yml
  run_once: true
  no_log: "{{ disable_logging }}"
  delegate_to: "{{ primary_public_ip }}"

- name: Update /etc/hosts based on use_hostname
  block:
    - import_tasks: linux_update_etc_hosts.yml
  become: yes
  when: use_hostname

- name: EFM installation
  block:
    - import_tasks: efm_hba.yml
    - import_tasks: efm_install.yml
  no_log: "{{ disable_logging }}"
  become: yes

- name: PgPoolII integration
  block:
    - include_role:
        name: setup_pgpool2
        tasks_from: pgpool2_install.yml
      vars:
        pgpool2_ssl: false
    - include_tasks: efm_pgpool2_integration.yml
  no_log: "{{ disable_logging }}"
  become: yes
  when:
    - efm_pgpool2_integration

- name: EFM configuration
  block:
    - import_tasks: efm_create_properties.yml
    - import_tasks: efm_configure.yml
  no_log: "{{ disable_logging }}"
  become: yes

- name: Efm parameters settings
  include_tasks: efm_cluster_set_params.yml
  no_log: "{{ disable_logging }}"

- name: Reset the variables used in this role
  set_fact:
     efm_nodes_list: ""
     primary_public_ip: ""
     input_password: ""
     pg_allow_ip_addresses: []
