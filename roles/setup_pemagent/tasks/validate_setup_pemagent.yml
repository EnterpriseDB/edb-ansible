---
# validate pemagent
- name: Gather the pem cluster informations
  ansible.builtin.set_fact:
    pem_cluster_nodes: "{{ lookup('edb_devops.edb_postgres.pg_sr_cluster_nodes', wantlist=True) }}"

- name: Get the primary private ip
  ansible.builtin.set_fact:
    primary_private_ip: "{{ node.private_ip }}"
  when: node.node_type == 'primary'
  loop: "{{ pem_cluster_nodes }}"
  loop_control:
    loop_var: node
  no_log: "{{ disable_logging }}"

- name: Run postgres query
  community.postgresql.postgresql_query:
    db: "{{ pg_database }}"
    login_unix_socket: "{{ pg_unix_socket_directories[0] }}"
    port: "{{ pg_port }}"
    login_user: "{{ pg_owner }}"
    query: "Select * from pg_user where usename = 'pemagent'"
  become_user: "{{ pg_owner }}"
  delegate_to: "{{ primary_private_ip }}"
  run_once: true
  register: pemagent_user_query_result

- name: Check if pemagent user is present
  ansible.builtin.assert:
    that:
      - pemagent_user_query_result.query_result[0]['usename'] == 'pemagent'
    fail_msg: "Pemagent user was not created correctly."
    success_msg: "Permagent user was created correctly."
  run_once: true

# validate pem agent id's
#"Cannot execute SQL 'Select id from pem.agent' None: relation \"pem.agent\" does not exist\nLINE 1: Select id from pem.agent\n
- name: Run postgres query
  community.postgresql.postgresql_query:
    db: "{{ pg_database }}"
    login_unix_socket: "{{ pg_unix_socket_directories[0] }}"
    port: "{{ pg_port }}"
    login_user: "{{ pg_owner }}"
    query: "Select id from pem.agent"
  become_user: "{{ pg_owner }}"
  delegate_to: "{{ pem_server_info[0].inventory_hostname }}"
  run_once: true
  register: pemagent_id_query_result



# validate pemagent service
- name: Gather service facts
  ansible.builtin.service_facts:

- name: Check if pemagent service is running and enabled
  ansible.builtin.assert:
    that:
      - ansible_facts.services['pemagent.service']['state'] == 'running'
      - ansible_facts.services['pemagent.service']['status'] == 'enabled'
    fail_msg: "The service 'pemagent' is not running."
    success_msg: "The service 'pemagent' is running."

# validate pemagent packages
- name: Gather package facts
  ansible.builtin.package_facts:
    strategy: "all"

- name: Check that all required packages have been installed
  ansible.builtin.assert:
    that:
      - ansible_facts.packages['edb-pem-agent'] is defined
    fail_msg: "Package 'edb-pem-agent' has not been installed."
    success_msg: "Package 'edb-pem-agent' has been installed."

- name: Fail
  ansible.builtin.fail:
    msg: "Fail Here"

- name: Reset variables
  ansible.builtin.set_fact:
    pem_cluster_nodes: null
    pemagent_user_query_result: null
    pemagent_id_query_result: null
