---

- name: check if agent key was registered
  stat:
    path: "{{ pem_agent_bin_path }}/../etc/.{{ inventory_hostname }}-{{ pg_port }}-registered"
  become: yes
  register: server_registered

- name: Get the pg_pem_agent_password
  include_role:
    name: manage_dbserver
    tasks_from: generate_password
  vars:
    input_user: "{{ pg_pem_agent_user }}"
    input_password: "{{ pg_pem_agent_password }}"
  no_log: true
  when: pg_pem_agent_password|length < 1

- name: Set pg_pem_agent_password
  set_fact:
     pg_pem_agent_password: "{{ input_password }}"
  when: pg_pem_agent_password|length < 1

- name: Register dbserver with agent and efm
  shell: |
    set -o pipefail
    set -eu
    PEM_SERVER_PASSWORD={{ pg_pem_admin_password }} \
    PEM_MONITORED_SERVER_PASSWORD={{ pg_pem_agent_password }} \
    {{ pem_agent_bin_path }}/pemworker \
        --register-server \
        --display-name "{{ inventory_hostname }}:{{ pg_port }}" \
        --pem-user {{ pg_pem_admin_user }} \
        --server-addr {{ node_hostvars.private_ip }} \
        --server-port {{ pg_port }} \
        --server-database {{ pg_database }} \
        --server-user {{ pg_user }} \
        --server-service-name {{ pg_service }} \
        --efm-cluster-name {{ efm_cluster_name }}  \
        --efm-install-path {{ efm_bin_path }} \
        --asb-host-name 127.0.0.1 \
        --asb-host-user {{ pg_pem_agent_user }} \
        --asb-ssl-mode prefer \
        --remote-monitoring no \
    && touch {{ pem_agent_bin_path }}/../etc/.{{ inventory_hostname }}-{{ pg_port }}-registered
  args:
    executable: /bin/bash
    creates: "{{ pem_agent_bin_path }}/../etc/.{{ inventory_hostname }}-{{ pg_port }}-registered"
  register: output
  changed_when: "'Database Server registered with Postgres Enterprise Manager Server successfully!' in output.stdout"
  failed_when: "'Database Server registered with Postgres Enterprise Manager Server successfully!' not in output.stdout"
  when: not server_registered.stat.exists and efm_enabled
  become: yes

- name: Register dbserver with agent
  shell: |
    set -o pipefail
    set -eu
    PEM_SERVER_PASSWORD={{ pg_pem_admin_password }} \
    PEM_MONITORED_SERVER_PASSWORD={{ pg_pem_agent_password }} \
    {{ pem_agent_bin_path }}/pemworker \
        --register-server \
        --display-name {{ inventory_hostname }} \
        --pem-user {{ pg_pem_admin_user }} \
        --server-addr {{ node_hostvars.private_ip }} \
        --server-port {{ pg_port }} \
        --server-database {{ pg_database }} \
        --server-user {{ pg_user }} \
        --server-service-name {{ pg_service }} \
        --asb-host-name 127.0.0.1 \
        --asb-host-user {{ pg_pem_agent_user }} \
        --asb-ssl-mode prefer \
        --remote-monitoring no \
    && touch {{ pem_agent_bin_path }}/../etc/.{{ inventory_hostname }}-{{ pg_port }}-registered
  args:
    executable: /bin/bash
    creates: "{{ pem_agent_bin_path }}/../etc/.{{ inventory_hostname }}-{{ pg_port }}-registered"
  register: output
  changed_when: "'Database Server registered with Postgres Enterprise Manager Server successfully!' in output.stdout"
  failed_when: "'Database Server registered with Postgres Enterprise Manager Server successfully!' not in output.stdout"
  when: not server_registered.stat.exists and not efm_enabled
  become: yes
