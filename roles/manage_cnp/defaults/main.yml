---
# defaults file for manage_cnp
# configuration variable for which
# task for execute within role
#cnp_task: "drop-db"
# Variables
host: localhost
# CloudNativePG Namespace
cnpg_namespace: default
# CloudNativePG Pod Name
pod_name: cnp-sandbox-1
# Roles
db_role: edb_test_user
db_role_password: admin
# Databases
db_name: edb
# Tables
tbl_name: films
# Schemas
schema_name: edb_schema
# Views
view_name: edb_view_notnullfilms
# Indexes
index_name: edb_index_film_name
# Sequences
sequence_name: edb_seq_name
# Procedures
procedure_name: edb_procedure_insert_film
# Functions
function_name: edb_get_films_count
# Triggers
trigger_function_name: log_check_filmname_changes
trigger_name: edb_films_trigger
# Types
type_tbl_name: courses
type_name: edb_type_enum

# SQL Statements
# Roles
add_role_sql: |
     CREATE ROLE {{ db_role }} LOGIN PASSWORD '{{ db_role_password  }}';
drop_role_sql:
  DROP ROLE {{ db_role }};
# Databases
add_db_sql: |
  CREATE DATABASE {{ db_name }};
drop_db_sql: |
  DROP DATABASE {{ db_name }};
# Tables
add_tbl_sql: |
  CREATE TABLE IF NOT EXISTS {{ tbl_name }}(
     filmid integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
     name   varchar(40) NOT NULL CHECK (name <> '')
  );
drop_tbl_sql: |
  DROP TABLE {{ tbl_name }};
# Schemas
add_schema_sql: |
  CREATE SCHEMA IF NOT EXISTS {{ schema_name }};
drop_schema_sql:
  DROP SCHEMA {{ schema_name }};
# Views
add_view_sql: |
  CREATE VIEW {{ view_name }} AS
    SELECT name FROM {{ tbl_name }} WHERE name IS NOT NULL;
drop_view_sql:
  DROP VIEW {{ view_name }};
# Indexes
add_index_sql: |
  CREATE UNIQUE INDEX {{ index_name }} ON
    {{ tbl_name }} (name);
drop_index_sql:
  DROP INDEX {{ index_name }};
# Sequences
add_sequence_sql: |
  CREATE SEQUENCE {{ sequence_name }} START 101;
drop_sequence_sql:
  DROP SEQUENCE {{ sequence_name }};
# Procedures
add_procedure_sql: |
  CREATE PROCEDURE {{ procedure_name }}()
  LANGUAGE SQL
  AS $$
    INSERT INTO {{ tbl_name }}(name) VALUES ('Goonies');
    INSERT INTO {{ tbl_name }}(name) VALUES ('Batman');
  $$;
drop_procedure_sql:
  DROP PROCEDURE {{ procedure_name }};
# Functions
add_function_sql: |
  CREATE FUNCTION {{ function_name }}() RETURNS integer
    AS 'SELECT COUNT(name) FROM {{ tbl_name }};'
    LANGUAGE SQL
    IMMUTABLE
    RETURNS NULL ON NULL INPUT;
drop_function_sql:
  DROP FUNCTION {{ function_name }};
# Triggers
add_trigger1_sql: |
  CREATE OR REPLACE FUNCTION {{ trigger_function_name }}()
    RETURNS TRIGGER
    LANGUAGE PLPGSQL
    AS
  $$
  BEGIN
    IF NEW.name <> OLD.name THEN
       INSERT INTO {{ tbl_name }}(name)
         VALUES(OLD.name);
    END IF;
    RETURN NEW;
  END;
  $$;
add_trigger2_sql: |
  CREATE TRIGGER {{ trigger_name }}
    BEFORE UPDATE
    ON {{ tbl_name }}
    EXECUTE PROCEDURE {{ trigger_function_name }}();
drop_trigger1_sql:
  DROP FUNCTION {{ trigger_function_name }};
drop_trigger2_sql:
  DROP TRIGGER {{ trigger_name }} ON {{ tbl_name }};
# Types
add_type1_sql: |
  CREATE TYPE {{ type_name }} AS ENUM('new', 'open', 'closed');
add_type2_sql: |
  CREATE TABLE IF NOT EXISTS {{ type_tbl_name }}(
     courseid integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
     name   varchar(40) NOT NULL CHECK (name <> ''),
     status {{ type_name }}
  );
drop_type1_sql: |
  DROP TABLE {{ type_tbl_name }};
drop_type2_sql: |
  DROP TYPE {{ type_name }};#
