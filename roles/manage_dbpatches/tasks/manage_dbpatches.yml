---
- name: Set the os variable
  ansible.builtin.set_fact:
    os: "{{ ansible_distribution }}{{ ansible_distribution_major_version }}"

- name: Check support for Operating System
  ansible.builtin.assert:
    that: os in supported_os
    fail_msg: "Operating System = {{ os }} not supported."
    success_msg: "Operating System = {{ os }} is supported."

- name: Check supported versions for Database engine
  ansible.builtin.assert:
    that: pg_version|int in supported_pg_version
    fail_msg: "Database Engine Version = {{ pg_version }} not supported.
               Supported versions are {{ supported_pg_version }}"
    success_msg: "Database Engine Version = {{ pg_version }} is supported."

- name: Check support for efm
  ansible.builtin.assert:
    that: efm_version | string in supported_efm_version
    fail_msg: "efm version = {{ efm_version }} not supported.
               Supported versions are {{ supported_efm_version }}"
    success_msg: "efm version = {{ efm_version }} is supported."

- name: Reference variables
  ansible.builtin.include_vars: "{{ pg_type }}_{{ ansible_os_family }}.yml"

- name: Gather services facts
  ansible.builtin.service_facts:

- name: Gather the EFM cluster informations
  ansible.builtin.set_fact:
    efm_cluster_nodes: "{{ lookup('edb_devops.edb_postgres.efm_nodes', wantlist=True) }}"
  run_once: true

- name: Get the primary information
  ansible.builtin.set_fact:
    efm_inventory_primary_public_ip: "{{ node.ansible_host }}"
    efm_inventory_primary_private_ip: "{{ node.private_ip }}"
    efm_inventory_primary_hostname: "{{ node.inventory_hostname }}"
  when: node.node_type == 'primary'
  loop: "{{ efm_cluster_nodes }}"
  loop_control:
    loop_var: node
  run_once: true
  no_log: "{{ disable_logging }}"

- name: Validate EFM cluster with inventory state
  ansible.builtin.import_tasks: validate_efm_cluster.yml

- name: Update standby servers to latest package one at a time
  ansible.builtin.include_tasks: update_standby_sequential.yml
  loop: "{{ efm_cluster_nodes }}"
  loop_control:
    loop_var: node
  run_once: true
  when:
    - node.node_type == 'standby'
    - run_in_sequence|bool
    - not skip_standby
    - pg_package_list|length > 0 or user_package_list|length > 0

- name: Update standby servers to latest package in parallel
  ansible.builtin.include_tasks: apply_db_patches.yml
  when:
    - "'standby' in group_names"
    - not run_in_sequence|bool
    - pg_package_list|length > 0 or user_package_list|length > 0
    - not skip_standby

- name: Update primary server to latest package
  ansible.builtin.include_tasks: apply_primary_patches.yml
  when:
    - "'primary' in group_names"
    - pg_package_list|length > 0 or user_package_list|length > 0
    - not skip_primary
