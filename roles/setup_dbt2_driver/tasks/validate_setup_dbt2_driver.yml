---
# validate dbttools package installation
- name: Gather the package facts
  ansible.builtin.package_facts:
    strategy: "all"

- name: Check that the 'dbttools' package has been installed
  ansible.builtin.assert:
    that:
      - "{{ ansible_facts.packages['dbttools'] }} is defined"
    fail_msg: "Package 'dbttools' has not been installed."
    success_msg: "Package 'dbttools' has been installed."

# ensure the DBT-2 AppImage has been installed to the proper location
- name: Stat to dbt2_path
  ansible.builtin.stat:
    path: "{{ dbt2_path }}"
  register: dbt2_path_driver_stat
  become: true

- name: Check if DBT-2 AppImage was installed properly on driver
  ansible.builtin.assert:
    that:
      - dbt2_path_driver_stat.stat['exists']|bool
    fail_msg: "DBT-2 AppImage at {{ dbt2_path }} was not created properly"
    success_msg: "DBT-2 AppImage at {{ dbt2_path }} was created successfully"

# validate dbt2 driver sudo user
- name: Run command to check DBT-2 driver sudo user was configured properly
  ansible.builtin.shell: |
    set -o pipefail
    env | grep USER
  args:
    executable: /bin/bash
  become: true
  become_user: "{{ pg_owner }}"
  run_once: true
  register: dbt2_driver_sudo_res
  changed_when: dbt2_driver_sudo_res.rc == '0'

- name: Check if DBT-2 driver sudo user has been configured correctly.
  ansible.builtin.assert:
    that:
      - dbt2_driver_sudo_res.stdout_lines is search('{{ pg_owner }}')
    fail_msg: "{{ pg_owner }} was not configured as sudo user correctly."
    success_msg: "{{ pg_owner }} was configured as sudo user correctly."
  run_once: true

# reset variables
- name: Reset variables
  ansible.builtin.set_fact:
    dbt2_path_driver_stat: null
    dbt2_driver_sudo_res: null
