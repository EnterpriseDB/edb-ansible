---
- name: Create ssl extension in pg_database
  ansible.builtin.include_role:
    name: manage_dbserver
    tasks_from: manage_extensions
  vars:
    pg_extensions:
      - name: sslutils
        database: "{{ pg_database }}"
        state: present
  no_log: "{{ disable_logging }}"

- name: Create ssl cert key
  community.postgresql.postgresql_query:
    login_user: "{{ pg_owner }}"
    port: "{{ pg_port }}"
    login_unix_socket: "{{ pg_unix_socket_directories[0] }}"
    query: "select public.openssl_rsa_generate_key(4096);"
    db: "{{ pg_database }}"
  become: true
  become_user: "{{ pg_owner }}"
  when: not ssl_ca_key.stat.exists
  register: sql_output

- name: CA key variable
  ansible.builtin.set_fact:
    ca_key: "{{ sql_output.query_result[0].openssl_rsa_generate_key }}"
  when: not ssl_ca_key.stat.exists

- name: Create CA key file in pg_data
  ansible.builtin.copy:
    dest: "{{ pg_data }}/ca_key.key"
    content: "{{ ca_key }}"
    mode: 0600
    owner: "{{ pg_owner }}"
    group: "{{ pg_owner }}"
  when: not ssl_ca_key.stat.exists
  become: true

- name: Create a certificate authority key
  community.postgresql.postgresql_query:
    login_user: "{{ pg_owner }}"
    port: "{{ pg_port }}"
    login_unix_socket: "{{ pg_unix_socket_directories[0] }}"
    query: "select public.openssl_csr_to_crt(
                       public.openssl_rsa_key_to_csr(
                             '{{ ca_key }}',
                             '{{ cert_common_name }}',
                             '{{ cert_country }}',
                             '{{ cert_state }}',
                             '{{ cert_city }}',
                             '{{ cert_org_unit }}',
                             '{{ cert_email }}'),
                        null,
                        '{{ pg_data }}/ca_key.key');"
    db: "{{ pg_database }}"
  when: not ssl_ca_certificate.stat.exists
  become: true
  become_user: "{{ pg_owner }}"
  register: sql_output

- name: CA certificate variable
  ansible.builtin.set_fact:
    ca_certificate: "{{ sql_output.query_result[0].openssl_csr_to_crt }}"
  when: not ssl_ca_certificate.stat.exists

- name: Create ca certificate file in pg_data
  ansible.builtin.copy:
    dest: "{{ pg_data }}/ca_certificate.crt"
    content: "{{ ca_certificate }}"
    mode: 0600
    owner: "{{ pg_owner }}"
    group: "{{ pg_owner }}"
  when: not ssl_ca_certificate.stat.exists
  become: true

- name: Create root.crt using ca certificate file in pg_data
  ansible.builtin.copy:
    dest: "{{ pg_data }}/root.crt"
    content: "{{ ca_certificate }}"
    mode: 0600
    owner: "{{ pg_owner }}"
    group: "{{ pg_owner }}"
  when: not ssl_root_crt.stat.exists
  become: true

- name: Create a root.crl
  community.postgresql.postgresql_query:
    login_user: "{{ pg_owner }}"
    port: "{{ pg_port }}"
    login_unix_socket: "{{ pg_unix_socket_directories[0] }}"
    query: "select public.openssl_rsa_generate_crl(
                           '{{ pg_data }}/ca_certificate.crt',
                           '{{ pg_data }}/ca_key.key');"
    db: "{{ pg_database }}"
  when: not ssl_root_crl.stat.exists
  become: true
  become_user: "{{ pg_owner }}"
  register: sql_output

- name: Create root.crl
  ansible.builtin.copy:
    dest: "{{ pg_data }}/root.crl"
    content: "{{ sql_output.query_result[0].openssl_rsa_generate_crl }}"
    mode: 0600
    owner: "{{ pg_owner }}"
    group: "{{ pg_owner }}"
  when: not ssl_root_crl.stat.exists
  become: true

- name: Create ssl server key
  community.postgresql.postgresql_query:
    login_user: "{{ pg_owner }}"
    port: "{{ pg_port }}"
    login_unix_socket: "{{ pg_unix_socket_directories[0] }}"
    query: "select public.openssl_rsa_generate_key(4096);"
    db: "{{ pg_database }}"
  become: true
  become_user: "{{ pg_owner }}"
  when: not ssl_server_key.stat.exists
  register: sql_output

- name: Server key variable
  ansible.builtin.set_fact:
    server_key: "{{ sql_output.query_result[0].openssl_rsa_generate_key }}"
  when: not ssl_server_key.stat.exists

- name: Create server key file in pg_data
  ansible.builtin.copy:
    dest: "{{ pg_data }}/server.key"
    content: "{{ server_key }}"
    mode: 0600
    owner: "{{ pg_owner }}"
    group: "{{ pg_owner }}"
  when: not ssl_server_key.stat.exists
  become: true

- name: Create a server cert
  community.postgresql.postgresql_query:
    login_user: "{{ pg_owner }}"
    port: "{{ pg_port }}"
    login_unix_socket: "{{ pg_unix_socket_directories[0] }}"
    query: "select public.openssl_csr_to_crt(
                       public.openssl_rsa_key_to_csr(
                                  '{{ server_key }}',
                                  '{{ cert_common_name }}',
                                  '{{ cert_country }}',
                                  '{{ cert_state }}',
                                  '{{ cert_city }}',
                                  '{{ cert_org_unit }}',
                                  '{{ cert_email }}'),
                       null,
                       '{{ pg_data }}/ca_key.key');"
    db: "{{ pg_database }}"
  when: not ssl_server_crt.stat.exists
  become: true
  become_user: "{{ pg_owner }}"
  register: sql_output

- name: CA certificate variable
  ansible.builtin.set_fact:
    server_certificate: "{{ sql_output.query_result[0].openssl_csr_to_crt }}"
  when: not ssl_server_crt.stat.exists

- name: Create ca certificate file in pg_data
  ansible.builtin.copy:
    dest: "{{ pg_data }}/server.crt"
    content: "{{ server_certificate }}"
    mode: 0600
    owner: "{{ pg_owner }}"
    group: "{{ pg_owner }}"
  when: not ssl_server_crt.stat.exists
  become: true

- name: Call manage_dbserver tasks for ssl update
  ansible.builtin.include_role:
    name: manage_dbserver
    tasks_from: manage_postgres_params.yml
  vars:
    pg_postgres_conf_params: "{{ pg_ssl_postgres_conf_params }}"
    use_patroni: true
