---

- name: Set the os variable
  set_fact:
    os: "{{ ansible_distribution }}{{ ansible_distribution_major_version if ansible_os_family == 'RedHat' else ansible_distribution_version }}"

- name: Check support for Operating System
  fail:
    msg: "Operating System = {{ os }} not supported."
  when: os not in supported_os

- name: Check supported versions for Database engine
  fail:
    msg: "Database Engine Version = {{ pg_version }} not supported.
          Supported versions are {{ supported_pg_version }}"
  when: pg_version|int not in supported_pg_version

- name: Check if Database Engine is supported
  fail:
    msg: "Database Engine = {{ pg_type }} {{ pg_version }}
          is not supported on {{ os }}."
  when: >
    pg_type == 'EPAS' and
    ( pg_version|int < 12 and os in ['RedHat8','CentOS8'] or
      pg_version|int < 11 and os in ['Ubuntu18.04', 'Debian9'] or
      pg_version|int < 13 and os in ['Ubuntu20.04']  or
      pg_version|int < 12 and os in ['Debian10'] )


- name: Set force_install based on the user input
  set_fact:
    force_install: "{{ hostvars[inventory_hostname].force_install }}"
  when: hostvars[inventory_hostname].force_install is defined
  register: output

- name: Remove Postgres packages on CentOS7 or RedHat
  block:
    - include_tasks: "{{ pg_type }}_{{ os }}_rm_install.yml"
  when:
    - force_install
  become: yes

- name: Install and Configure Postgres on RedHat
  block:
    - include_tasks: "{{ pg_type }}_RedHat{{ ansible_distribution_major_version }}_install.yml"
  become: yes
  when: ansible_os_family == 'RedHat'

- name: Install and Configure Postgres on RedHat
  block:
    - include_tasks: "{{ pg_type }}_Debian_install.yml"
  become: yes
  when: ansible_os_family == 'Debian'

- name: Reset force_install based on the user input
  set_fact:
    force_install: false
