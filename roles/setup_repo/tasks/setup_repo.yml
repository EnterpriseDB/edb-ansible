---

- name: Set the os variable
  set_fact:
    os: "{{ ansible_distribution | replace('RedHat', 'RHEL') }}{{ ansible_distribution_major_version }}"

- name: Check support for Operating System
  fail:
    msg: "Operating System = {{ os }} not supported."
  when: os not in supported_os

- name: Check support for Database engine
  fail:
    msg: "Database Engine = {{ pg_type }} is not supported.
         Supported Database Engines are {{ supported_pg_type }}"
  when: pg_type not in supported_pg_type

- name: Check if Database Engine is supported
  fail:
    msg: "Database Engine = {{ pg_type }} {{ pg_version }}
          is not supported on RHEL8/CentOS8."
  when:
    - pg_type == 'EPAS' and pg_version|int < 12
    - os in ['RHEL8','CentOS8']

- name: Validate Credentials
  fail:
      msg: "yum_username = {{ yum_username }} or yum_password = {{ yum_password }} are not valid!."
  when: (yum_username | length < 1 or yum_password | length < 1)

- name: Set force install based on the user input
  set_fact:
    force_install: "{{ hostvars[inventory_hostname].force_install }}"
  when: hostvars[inventory_hostname].force_install is defined
  register: output

- name: Cleanup the repos based on force_install
  block:
    - include_tasks: "{{ pg_type }}_rhel_rm_repos.yml"
  when: force_install
  become: yes

- name: Install Postgres RPM repositories
  block:
    - include_tasks: "{{ pg_type }}_rhel_setuprepos.yml"
  become: yes

- name: Reset force install based on the user input
  set_fact:
    force_install: false
