---

- name: Set the os variable
  set_fact:
    os: "{{ ansible_distribution }}{{ ansible_distribution_major_version }}"

- name: Check support for Operating System
  fail:
    msg: "Operating System = {{ os }} not supported."
  when: os not in supported_os

- name: Check support for Database engine
  fail:
    msg: "Database Engine = {{ pg_type }} is not supported.
         Supported Database Engines are {{ supported_pg_type }}"
  when: pg_type not in supported_pg_type

- name: Check if Database Engine is supported
  fail:
    msg: "Database Engine = {{ pg_type }} {{ pg_version }}
          is not supported on RHEL8/CentOS8."
  when: >
    pg_type == 'EPAS' and
    ( pg_version|int < 12 and os in ['RedHat8','CentOS8'] or
      pg_version|int < 11 and os in ['Ubuntu18', 'Debian9'] or
      pg_version|int < 13 and os in ['Ubuntu20']  or
      pg_version|int < 12 and os in ['Debian10'] )

- name: Validate Credentials
  fail:
      msg: "repo_username = {{ repo_username }} or repo_password = {{ repo_password }} are not valid!."
  when: (repo_username | length < 1 or repo_password | length < 1)

- name: Set force install based on the user input
  set_fact:
    force_install: "{{ hostvars[inventory_hostname].force_install }}"
  when: hostvars[inventory_hostname].force_install is defined
  register: output

- name: Cleanup the repos based on force_install
  block:
    - include_tasks: "PG_RedHat_rm_repos.yml"
  when: force_install
  become: true

- name: Install Postgres RPM repositories
  block:
    - include_tasks: "PG_RedHat_setuprepos.yml"
  when:
    - ansible_os_family == 'RedHat'
  become: true

- name: Install Postgres RPM repositories
  block:
    - include_tasks: "PG_Debian_setuprepos.yml"
  when:
    - ansible_os_family == 'Debian'
  become: true

- name: Reset force install based on the user input
  set_fact:
    force_install: false
