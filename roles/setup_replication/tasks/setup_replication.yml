---
- name: Set the os variable
  set_fact:
    os: "{{ ansible_distribution }}{{ ansible_distribution_major_version }}"

- name: Check support for Operating System
  fail:
    msg: "Operating System = {{ os }} not supported."
  when: os not in supported_os

- name: Check supported versions for Database engine
  fail:
    msg: "Database Engine Version = {{ pg_version }} not supported.
          Supported versions are {{ supported_pg_version }}"
  when: pg_version|int not in supported_pg_version

- name: Reference EPAS or PG variables
  include_vars: "{{ pg_type }}_{{ ansible_os_family }}.yml"

- name: Gather service facts
  service_facts:

- name: Open Postgres TCP port {{ pg_port }}
  ansible.posix.firewalld:
    port: "{{ pg_port }}/tcp"
    permanent: yes
    state: enabled
    immediate: true
  when:
    - ansible_facts.services['firewalld.service'] is defined
    - ansible_facts.services['firewalld.service'].state == 'running'
    - ansible_facts.services['firewalld.service'].status == 'enabled'
  become: yes

- name: Force cleanup based on force_initdb/replication
  block:
    - include_tasks: rm_replication.yml
  when: (force_initdb is defined and force_initdb)
      or (force_replication is defined and force_replication)
  become: yes

- name: Gather the cluste_nodes information
  set_fact:
    pg_cluster_nodes: "{{ lookup('edb_devops.edb_postgres.pg_sr_cluster_nodes', wantlist=True) }}"

- name: Get the primary information
  set_fact:
    primary_public_ip: "{{ node.ansible_host }}"
  loop: "{{ pg_cluster_nodes }}"
  loop_control:
    loop_var: node
  when:  node.node_type == 'primary'
  run_once: true
  no_log: "{{ disable_logging }}"

- name: Prepare host ip lists based on allow_node_ips
  include_tasks: prepare_hba_value_list.yml

- name: Prepare synchronous_standby_names
  set_fact:
    synchronous_standbys: "{{ synchronous_standbys + [ node.inventory_hostname ] }}"
  loop: "{{ pg_cluster_nodes }}"
  loop_control:
    loop_var: node
  when:
    - node.node_type == 'standby'
    - node.replication_type == 'synchronous'
  no_log: "{{ disable_logging }}"
  run_once: true

- name: Update primary for replication
  import_tasks: primary_settings.yml
  run_once: true
  no_log: "{{ disable_logging }}"
  delegate_to: "{{ primary_public_ip }}"

- name: Update /etc/hosts based on use_hostname
  block:
    - import_tasks: linux_update_etc_hosts.yml
  become: yes
  no_log: "{{ disable_logging }}"
  when: use_hostname

- name: Call upstream update based on the upstream node
  block:
    - import_tasks: upstream_node.yml
  when:
    - hostvars[inventory_hostname].upstream_node_private_ip is defined
  no_log: "{{ disable_logging }}"

- name: Build standby service check
  block:
    - import_tasks: create_directories.yml
    - import_tasks: pg_basebackup.yml
    - import_tasks: pg_setup_systemd.yml
    - import_tasks: configure_node.yml
  become: yes

- name: Update primary for synchronous replication
  import_tasks: primary_synchronous_param.yml
  when: synchronous_standbys|length > 0
  run_once: true
  delegate_to: "{{ primary_public_ip }}"
  no_log: "{{ disable_logging }}"

- name: Reset the variables based on the user input
  set_fact:
      primary_private_ip: ""
      primary_public_ip: ""
      primary_host_name: ""
      standby_names: []
      pg_allow_ip_addresses: []
      standby_physical_slots: []
      force_replication: false
  register: output
