---
- name: Check Operating System, PostgreSQL Type, PostgreSQL Version
  include_role:
    name: common
    tasks_from: check_version.yml

- name: Reference pg_type variables
  include_vars: "{{ pg_type }}_{{ ansible_os_family }}.yml"

- name: Gather service facts
  service_facts:

- name: Get facts on current container
  community.docker.current_container_facts:

- name: Open Postgres TCP port {{ pg_port }}
  ansible.posix.firewalld:
    port: "{{ pg_port }}/tcp"
    permanent: true
    state: enabled
    immediate: true
  when:
    - ansible_facts.services['firewalld.service'] is defined
    - ansible_facts.services['firewalld.service'].state == 'running'
    - ansible_facts.services['firewalld.service'].status == 'enabled'
  become: true

- name: Force cleanup based on force_initdb/replication
  when: (force_initdb is defined and force_initdb)
    or (force_replication is defined and force_replication)
  become: true
  block:
    - name: Remove replication node
      ansible.builtin.include_tasks: rm_replication.yml

- name: Gather the cluste_nodes information
  set_fact:
    pg_cluster_nodes: "{{ lookup('hypersql_devops.postgres.pg_sr_cluster_nodes', wantlist=True) }}"

- name: Get the primary information
  set_fact:
    primary_inventory_hostname: "{{ node.inventory_hostname }}"
  loop: "{{ pg_cluster_nodes }}"
  loop_control:
    loop_var: node
  when: node.node_type == 'primary'
  run_once: true
  no_log: "{{ disable_logging }}"

- name: Prepare host ip lists based on allow_node_ips
  include_tasks: prepare_hba_value_list.yml

- name: Prepare synchronous_standby_names
  set_fact:
    _synchronous_standbys: "{{ _synchronous_standbys|default([]) + [ node.inventory_hostname ] }}"
  loop: "{{ pg_cluster_nodes }}"
  loop_control:
    loop_var: node
  when:
    - node.node_type == 'standby'
    - node.replication_type == 'synchronous'
    - synchronous_standby_names|length < 1
  no_log: "{{ disable_logging }}"
  run_once: true

- name: Update primary for replication
  import_tasks: primary_settings.yml
  run_once: true
  no_log: "{{ disable_logging }}"
  delegate_to: "{{ primary_inventory_hostname }}"

- name: Update /etc/hosts based on use_hostname
  include_role:
    name: common
    tasks_from: linux_update_etc_hosts.yml
  no_log: "{{ disable_logging }}"
  when:
    - use_hostname|bool
    - update_etc_file|bool

- name: Call upstream update based on the upstream node
  when:
    - hostvars[inventory_hostname].upstream_node_private_ip is defined
  no_log: "{{ disable_logging }}"
  block:
    - name: Set upstream node
      ansible.builtin.import_tasks: upstream_node.yml

- name: Build standby service check
  become: true
  block:
    - name: Create directories if not exists
      ansible.builtin.import_tasks: create_directories.yml
    - name: Take PG base backup
      ansible.builtin.import_tasks: pg_basebackup.yml
    - name: Setup systemd file
      ansible.builtin.import_tasks: pg_setup_systemd.yml
    - name: Send SSL files based on users input
      ansible.builtin.import_tasks: pg_ssl_send_files.yml
    - name: Configure standby node
      ansible.builtin.import_tasks: configure_node.yml

- name: Update primary for synchronous replication
  import_tasks: primary_synchronous_param.yml
  when: >-
    _synchronous_standbys is defined and (
    _synchronous_standbys|length > 0
    or synchronous_standby_names|length > 0 )
  run_once: true
  delegate_to: "{{ primary_inventory_hostname }}"
  no_log: "{{ disable_logging }}"

- name: Reset the variables based on the user input
  set_fact:
    primary_private_ip: ""
    primary_inventory_hostname: ""
    primary_host_name: ""
    standby_names: []
    pg_allow_ip_addresses: []
    standby_physical_slots: []
    force_replication: false
  register: output
