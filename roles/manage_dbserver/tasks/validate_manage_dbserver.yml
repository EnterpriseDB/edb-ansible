---
# Test if files were created properly
- name: Stat to psqlrc_path
  ansible.builtin.stat:
    path: "{{ psqlrc_path }}"
  register: psqlrc_stat

- name: Stat to shell_profile_path
  ansible.builtin.stat:
    path: "{{ shell_profile_path }}"
  register: shell_profile_stat

- name: Stat to pg_user_home/.pgpass
  ansible.builtin.stat:
    path: "{{ pg_user_home }}/.pgpass"
  register: pgpass_stat
  become_user: "{{ pg_owner }}"

- name: Check if .psqlrc file was created properly
  ansible.builtin.assert:
    that:
      - psqlrc_stat.stat['exists']|bool
      - psqlrc_stat.stat['pw_name'] == pg_owner
      - psqlrc_stat.stat['gr_name'] == pg_group
    fail_msg: ".psqlrc file {{ psqlrc_path }} was not created properly"
    success_msg: ".psqlrc file {{ psqlrc_path }} was created successfully"

- name: Check if shell profile file was created properly
  ansible.builtin.assert:
    that:
      - shell_profile_stat.stat['exists']|bool
      - shell_profile_stat.stat['pw_name'] == pg_owner
      - shell_profile_stat.stat['gr_name'] == pg_group
    fail_msg: "Shell profile file {{ shell_profile_path }} was not created properly"
    success_msg: "Shell profile file {{ shell_profile_path }} was created successfully"

- name: Check if .pgpass file was created properly if at all
  ansible.builtin.assert:
    that:
      - pgpass_stat.stat['pw_name'] == pg_owner
      - pgpass_stat.stat['gr_name'] == pg_group
    fail_msg: "pgpass file {{ pg_user_home }}/.pgpass was not created properly"
    success_msg: "pgpass file {{ pg_user_home }}/.pgpass was created successfully"
  when:
    - pgpass_stat.stat['exists']|bool

# test manage_dbserver created user
- name: Run postgres query to check if pg_users were created correctly
  community.postgresql.postgresql_query:
    db: "{{ pg_database }}"
    login_unix_socket: "{{ pg_unix_socket_directories[0] }}"
    port: "{{ pg_port }}"
    login_user: "{{ pg_owner }}"
    query: "Select * from pg_user where usename = %s"
    positional_args:
      - '{{ user.name }}'
  become_user: "{{ pg_owner }}"
  loop: "{{ pg_users }}"
  loop_control:
    loop_var: user
  when: pg_users|length > 0
  run_once: true
  register: pg_users_query_result

- name: Isolate desired value from query result
  ansible.builtin.set_fact:
    pg_users_query_names: "{{ pg_users_query_result.results | selectattr('query_result', 'defined') | map(attribute='query_result') | flatten | map(attribute='usename') }}"
    pg_users_names: "{{ pg_users | map(attribute='name') }}"
  when: pg_users|length > 0

- name: Check if pg_users were created correctly
  ansible.builtin.assert:
    that:
      - pg_users_names|difference(pg_users_query_names)|length == 0
    fail_msg: "User(s) {{ pg_users_names | difference(pg_users_query_names) }} was/were not created correctly."
    success_msg: "User(s) {{ pg_users_names | join(', ') }} was/were created successfully."
  when: pg_users|length > 0
  run_once: true

# test manage_dbserver hba file
- name: Run postgres query to check if pg_hba file was correctly found
  community.postgresql.postgresql_query:
    db: "{{ pg_database }}"
    login_unix_socket: "{{ pg_unix_socket_directories[0] }}"
    port: "{{ pg_port }}"
    login_user: "{{ pg_owner }}"
    query: "Show hba_file"
  become: true
  become_user: "{{ pg_owner }}"
  run_once: true
  register: hba_query_result

- name: Check if pg_hba file was successfully modified
  ansible.builtin.assert:
    that:
      - hba_query_result.query_result[0]['hba_file'] is defined
    fail_msg: "pg_hba.conf file was not successfully modified."
    success_msg: "pg_hba.conf file was successfully modified."
  run_once: true

# test manage_dbserver conf params
- name: Generate conf_query_list
  ansible.builtin.set_fact:
    conf_query_list: "{{ conf_query_list | default([]) + ['Show ' + item.name | string] }}"
  loop: "{{ pg_postgres_conf_params }}"
  when: pg_postgres_conf_params|length > 0

- name: Run postgres query to check if pg_postgres_conf_params were updated
  community.postgresql.postgresql_query:
    db: "{{ pg_database }}"
    login_unix_socket: "{{ pg_unix_socket_directories[0] }}"
    port: "{{ pg_port }}"
    login_user: "{{ pg_owner }}"
    query: "{{ item }}"
  become_user: "{{ pg_owner }}"
  loop: "{{ conf_query_list }}"
  when: pg_postgres_conf_params|length > 0
  run_once: true
  register: conf_query

- name: Isolate desired value from query result
  ansible.builtin.set_fact:
    conf_query_res: "{{ conf_query.results | selectattr('query_result', 'defined') | map(attribute='query_result') | flatten }}"
  when:
    - pg_postgres_conf_params|length > 0

- name: Check if pg_postgres_conf_params were updated correctly
  ansible.builtin.assert:
    that:
      - conf_query_res[ansible_loop.index0][parameter.name] == parameter.value
    fail_msg: "Configuration parameter {{ parameter.name }} was not updated correctly."
    success_msg: "Configuration parameter {{ parameter.name }} was updated correctly."
  when: pg_postgres_conf_params|length > 0
  loop: "{{ pg_postgres_conf_params }}"
  loop_control:
    loop_var: parameter
    extended: true
  run_once: true

# test manage_dbserver pg slots
- name: Run postgres query to check replication slots
  community.postgresql.postgresql_query:
    db: "{{ pg_database }}"
    login_unix_socket: "{{ pg_unix_socket_directories[0] }}"
    port: "{{ pg_port }}"
    login_user: "{{ pg_owner }}"
    query: "Select * from pg_replication_slots WHERE slot_name = %s"
    positional_args:
      - '{{ slot.name }}'
  become_user: "{{ pg_owner }}"
  loop: "{{ pg_slots }}"
  loop_control:
    loop_var: slot
  when: pg_slots|length > 0
  run_once: true
  register: slot_query

- name: Isolate desired value from query result
  ansible.builtin.set_fact:
    pg_slots_query_names: "{{ slot_query.results | selectattr('query_result', 'defined') | map(attribute='query_result') | flatten | map(attribute='slot_name') }}"
    pg_slots_names: "{{ pg_slots | map(attribute='name') }}"
  when:
    - pg_slots|length > 0

- name: Check if pg_slots were added
  ansible.builtin.assert:
    that:
      - pg_slots_names|difference(pg_slots_query_names)|length == 0
    fail_msg: "Slot(s) {{ pg_slots_names|difference(pg_slots_query_names) }} was/were not created correctly."
    success_msg: "Slot(s) {{ pg_slots_names | join(', ') }} was/were created correctly."
  run_once: true
  when: pg_slots|length > 0

# test manage_dbserver pg extension
- name: Run postgres query to check if pg_extension
  community.postgresql.postgresql_query:
    db: "{{ pg_database }}"
    login_unix_socket: "{{ pg_unix_socket_directories[0] }}"
    port: "{{ pg_port }}"
    login_user: "{{ pg_owner }}"
    query: "Select * from pg_extension WHERE extname = %s"
    positional_args:
      - '{{ extension.name }}'
  become_user: "{{ pg_owner }}"
  loop: "{{ pg_extensions }}"
  loop_control:
    loop_var: extension
  when: pg_extensions|length > 0
  run_once: true
  register: ext_query

- name: Isolate desired value from query result
  ansible.builtin.set_fact:
    ext_query_names: "{{ ext_query.results | selectattr('query_result', 'defined') | map(attribute='query_result') | flatten | map(attribute='extname') }}"
    ext_names: "{{ pg_extensions | map(attribute='name') }}"
  when:
    - pg_extensions|length > 0

- name: Check if pg_postgres_conf_params were updated correctly
  ansible.builtin.assert:
    that:
      - ext_names|difference(ext_query_names)|length == 0
    fail_msg: "Extension(s) {{ ext_names|difference(ext_query_names) }} was/were not updated correctly."
    success_msg: "Extension(s) {{ ext_names | join(', ') }} was/were updated correctly."
  when: pg_extensions|length > 0
  run_once: true

# test manage_dbserver pg grant roles
- name: Run postgres query to check if pg_roles
  community.postgresql.postgresql_query:
    db: "{{ pg_database }}"
    login_unix_socket: "{{ pg_unix_socket_directories[0] }}"
    port: "{{ pg_port }}"
    login_user: "{{ pg_owner }}"
    query: "Select rolname FROM pg_roles WHERE pg_has_role(%s, oid, 'member') AND rolname = %s"
    positional_args:
      - '{{ role.user }}'
      - '{{ role.role }}'
  become_user: "{{ pg_owner }}"
  loop: "{{ pg_grant_roles }}"
  loop_control:
    loop_var: role
  when: pg_grant_roles|length > 0
  run_once: true
  register: role_query

- name: Isolate desired value from query result
  ansible.builtin.set_fact:
    pg_roles_query_names: "{{ role_query.results | selectattr('query_result', 'defined') | map(attribute='query_result') | flatten | map(attribute='rolname') }}"
    pg_roles_names: "{{ pg_grant_roles | map(attribute='role') }}"
  when:
    - pg_grant_roles|length > 0

- name: Check if pg_postgres_conf_params were updated correctly
  ansible.builtin.assert:
    that:
      - pg_roles_names|difference(pg_roles_query_names)|length == 0
    fail_msg: "Role(s) {{ pg_roles_names|difference(pg_roles_query_names) }} was/were not updated correctly."
    success_msg: "Role(s) {{ pg_roles_names | join(', ') }} was/were updated correctly."
  when: pg_grant_roles|length > 0
  run_once: true

- name: Reset variables
  ansible.builtin.set_fact:
    psqlrc_stat: null
    shell_profile_stat: null
    pgpass_stat: null
    pg_users_query_result: null
    pg_users_query_names: null
    pg_users_names: null
    hba_query_result: null
    conf_query: null
    conf_query_res: null
    slot_query: null
    pg_slots_names: null
    pg_slots_query_names: null
    ext_query: null
    ext_names: null
    ext_query_names: null
    role_query: null
    pg_roles_names: null
    pg_roles_query_names: null
