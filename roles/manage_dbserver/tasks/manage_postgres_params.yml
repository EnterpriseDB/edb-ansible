---
- name: Check user defined parameters and update
  community.postgresql.postgresql_set:
    login_unix_socket: "{{ pg_unix_socket_directories[0] }}"
    port: "{{ pg_port }}"
    db: "{{ pg_database }}"
    login_user: "{{ pg_owner }}"
    name: "{{ line_item.name }}"
    value: "{{ line_item.value }}"
  when: pg_postgres_conf_params|length > 0
  with_items: "{{ pg_postgres_conf_params }}"
  become: true
  become_user: "{{ pg_owner }}"
  loop_control:
    loop_var: line_item
  no_log: "{{ disable_logging }}"
  register: params

- name: Register the restart requirements
  ansible.builtin.set_fact:
    params_restart_required: true
  when:
    - pg_postgres_conf_params|length > 0
    - line_item.changed and line_item.restart_required
  with_items: "{{ params.results }}"
  loop_control:
    loop_var: line_item
  no_log: "{{ disable_logging }}"

- name: Reload the pg service
  ansible.builtin.systemd:
    name: "{{ pg_service }}"
    daemon_reload: true
    state: reloaded
  become: true
  when:
    - pg_postgres_conf_params|length > 0
    - params.changed
    - not params_restart_required
    - not use_patroni

- name: Reload patroni postgres
  ansible.builtin.shell: >
    {{ patroni_bin_dir }}/patronictl -c {{ patroni_config_file }} \
        reload {{ pg_instance_name }} {{ inventory_hostname }} --force
  args:
    executable: /bin/bash
  register: patronictl_exec
  changed_when: patronictl_exec.rc == 0
  failed_when: patronictl_exec.rc != 0
  when:
    - pg_postgres_conf_params|length > 0
    - params.changed
    - not params_restart_required
    - use_patroni
  become_user: "{{ pg_owner }}"
  become: true

- name: Restart patroni postgres
  ansible.builtin.shell: >
    {{ patroni_bin_dir }}/patronictl -c {{ patroni_config_file }} \
        restart {{ pg_instance_name }} {{ inventory_hostname }} --force
  args:
    executable: /bin/bash
  register: patronictl_exec
  changed_when: patronictl_exec.rc == 0
  failed_when: patronictl_exec.rc != 0
  when:
    - pg_postgres_conf_params|length > 0
    - params.changed
    - params_restart_required
    - use_patroni
  become_user: "{{ pg_owner }}"
  become: true

- name: Gather services facts
  ansible.builtin.service_facts:

- name: Stop failover manager service if exists
  ansible.builtin.systemd:
    name: "{{ efm_service }}"
    state: stopped
  when:
    - ansible_facts.services[efm_service + '.service'] is defined
    - ansible_facts.services[efm_service + '.service'].state == 'running'
    - ansible_facts.services[efm_service + '.service'].status == 'enabled'
    - pg_postgres_conf_params|length > 0
    - params.changed
    - params_restart_required is defined
    - params_restart_required
    - not use_patroni
  become: true

- name: Restart the pg service
  ansible.builtin.systemd:
    name: "{{ pg_service }}"
    daemon_reload: true
    state: restarted
  become: true
  when:
    - pg_postgres_conf_params|length > 0
    - params.changed
    - params_restart_required is defined
    - params_restart_required
    - not use_patroni

- name: Start failover manager service if exists
  ansible.builtin.systemd:
    name: "{{ efm_service }}"
    state: started
  when:
    - ansible_facts.services[efm_service + '.service'] is defined
    - ansible_facts.services[efm_service + '.service'].state == 'running'
    - ansible_facts.services[efm_service + '.service'].status == 'enabled'
    - pg_postgres_conf_params|length > 0
    - params.changed
    - params_restart_required is defined
    - params_restart_required
    - not use_patroni
  become: true

- name: Reset the restart_required
  ansible.builtin.set_fact:
    params_restart_required: false
