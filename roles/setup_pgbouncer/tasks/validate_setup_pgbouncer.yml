---
- name: Get pgbouncer cluster node information
  ansible.builtin.set_fact:
    pgbouncer_cluster_nodes: "{{ lookup('edb_devops.edb_postgres.pg_sr_cluster_nodes', wantlist=True) }}"

- name: Get the primary private IP and primary hostname
  ansible.builtin.set_fact:
    primary_private_ip: "{{ node.private_ip }}"
  when: node.node_type == 'primary'
  loop: "{{ pgbouncer_cluster_nodes }}"
  loop_control:
    loop_var: node
  no_log: "{{ disable_logging }}"

# validate service is running
- name: Gather service facts
  ansible.builtin.service_facts:

- name: Check if service pgbouncer_service_name is running
  ansible.builtin.assert:
    that:
      - ansible_facts.services[pgbouncer_service_name + '.service']['state'] == 'running'
    fail_msg: "The service {{ pgbouncer_service_name }} is not running."
    success_msg: "The service {{ pgbouncer_service_name }} is running."

# validate package is installed
- name: Gather the package facts
  ansible.builtin.package_facts:
    strategy: "all"

- name: Check that all required packages have been installed
  ansible.builtin.assert:
    that:
      - ansible_facts.packages[pgbouncer_package_name] is defined"
    fail_msg: "Package {{ pgbouncer_package_name }} has not been installed."
    success_msg: "Package {{ pgbouncer_package_name }} has been installed."

# validate pgbouncer user
#- name: Run command to check pgbouncer user
#  ansible.builtin.shell:
#  become: true
#  become_user: "{{ pg_owner }}"
#  run_once: true
#  delegate_to: "{{ primary_private_ip }}"
#  register: pgbouncer_user_res

# validate pgbouncer config

# validate pgbouncer port/active sockets

#- name: Reset variables
#  ansible.builtin.set_fact:
#    pgbouncer_user_res: null
