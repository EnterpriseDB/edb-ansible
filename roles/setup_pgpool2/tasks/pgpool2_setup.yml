---

- name: Gather service facts
  ansible.builtin.service_facts:

- name: Open listening TCP port {{ pgpool2_port | default('') }}
  ansible.posix.firewalld:
    port: "{{ pgpool2_port }}/tcp"
    permanent: true
    state: enabled
    immediate: true
  when:
    - ansible_facts.services['firewalld.service'] is defined
    - ansible_facts.services['firewalld.service'].state == 'running'
    - ansible_facts.services['firewalld.service'].status == 'enabled'
    - pgpool2_port is defined
  become: true

- name: Open PCP TCP port {{ pgpool2_pcp_port | default('') }}
  ansible.posix.firewalld:
    port: "{{ pgpool2_pcp_port }}/tcp"
    permanent: true
    state: enabled
    immediate: true
  when:
    - ansible_facts.services['firewalld.service'] is defined
    - ansible_facts.services['firewalld.service'].state == 'running'
    - ansible_facts.services['firewalld.service'].status == 'enabled'
    - pgpool2_pcp_port is defined
  become: true

- name: Open PCP UDP port {{ pgpool2_pcp_port | default('') }}
  ansible.posix.firewalld:
    port: "{{ pgpool2_pcp_port }}/udp"
    permanent: true
    state: enabled
    immediate: true
  when:
    - ansible_facts.services['firewalld.service'] is defined
    - ansible_facts.services['firewalld.service'].state == 'running'
    - ansible_facts.services['firewalld.service'].status == 'enabled'
    - pgpool2_pcp_port is defined
  become: true

- name: Open Watchdog TCP port {{ pgpool2_wd_port | default('') }}
  ansible.posix.firewalld:
    port: "{{ pgpool2_wd_port }}/tcp"
    permanent: true
    state: enabled
    immediate: true
  when:
    - ansible_facts.services['firewalld.service'] is defined
    - ansible_facts.services['firewalld.service'].state == 'running'
    - ansible_facts.services['firewalld.service'].status == 'enabled'
    - pgpool2_wd_port is defined
    - pgpool2_watchdog
  become: true

- name: Open Watchdog UDP port {{ pgpool2_wd_port | default('') }}
  ansible.posix.firewalld:
    port: "{{ pgpool2_wd_port }}/udp"
    permanent: true
    state: enabled
    immediate: true
  when:
    - ansible_facts.services['firewalld.service'] is defined
    - ansible_facts.services['firewalld.service'].state == 'running'
    - ansible_facts.services['firewalld.service'].status == 'enabled'
    - pgpool2_wd_port is defined
    - pgpool2_watchdog
  become: true

- name: Open Watchdog heartbeat TCP port {{ pgpool2_wd_heartbeat_port | default('') }}
  ansible.posix.firewalld:
    port: "{{ pgpool2_wd_heartbeat_port }}/tcp"
    permanent: true
    state: enabled
    immediate: true
  when:
    - ansible_facts.services['firewalld.service'] is defined
    - ansible_facts.services['firewalld.service'].state == 'running'
    - ansible_facts.services['firewalld.service'].status == 'enabled'
    - pgpool2_wd_heartbeat_port is defined
    - pgpool2_watchdog
  become: true

- name: Open Watchdog heartbeat UDP port {{ pgpool2_wd_heartbeat_port | default('') }}
  ansible.posix.firewalld:
    port: "{{ pgpool2_wd_heartbeat_port }}/udp"
    permanent: true
    state: enabled
    immediate: true
  when:
    - ansible_facts.services['firewalld.service'] is defined
    - ansible_facts.services['firewalld.service'].state == 'running'
    - ansible_facts.services['firewalld.service'].status == 'enabled'
    - pgpool2_wd_heartbeat_port is defined
    - pgpool2_watchdog
  become: true

# Tasks for setting up pgpoolII
- name: Create pgpoolII system group {{ pgpool2_group }}
  ansible.builtin.group:
    name: "{{ pgpool2_group }}"
    state: present
  become: true

- name: Create pgpoolII system user {{ pgpool2_user }}
  ansible.builtin.user:
    name: "{{ pgpool2_user }}"
    system: true
    group: "{{ pgpool2_group }}"
    state: present
    create_home: false
  become: true

- name: Create configuration directory {{ pgpool2_configuration_file | dirname }}
  ansible.builtin.file:
    path: "{{ pgpool2_configuration_file | dirname }}"
    state: directory
    owner: "{{ pgpool2_user }}"
    group: "{{ pgpool2_group }}"
    mode: 0755
  become: true

- name: Create pgpoolII logging directory {{ pgpool2_logdir }}
  ansible.builtin.file:
    path: "{{ pgpool2_logdir }}"
    state: directory
    owner: "{{ pgpool2_user }}"
    group: "{{ pgpool2_group }}"
    mode: 0755
  when: pgpool2_logdir is defined
  become: true

- name: Create running directory {{ pgpool2_pid_file_name | default('') | dirname }}
  ansible.builtin.file:
    path: "{{ pgpool2_pid_file_name | dirname }}"
    state: directory
    owner: "{{ pgpool2_user }}"
    group: "{{ pgpool2_group }}"
    mode: 0700
  when: pgpool2_pid_file_name is defined
  become: true

# Build the configuration file
- name: Build configuration file {{ pgpool2_configuration_file }}
  ansible.builtin.template:
    src: "./templates/pgpool.conf.template"
    dest: "{{ pgpool2_configuration_file }}"
    owner: "{{ pgpool2_user }}"
    group: "{{ pgpool2_group }}"
    mode: 0600
  become: true

- name: Create pgpoolII systemd directory for PG
  ansible.builtin.file:
    path: "{{ pgpool2_systemd_config_file | dirname }}"
    state: directory
    owner: "root"
    group: "root"
    mode: 0700
  when:
    - pg_type == 'PG'
  become: true

- name: Create pgpoolII systemd directory for EPAS Debian
  ansible.builtin.file:
    path: "{{ pgpool2_systemd_config_file | dirname }}"
    state: directory
    owner: "root"
    group: "root"
    mode: 0700
  when:
    - pg_type == 'EPAS'
    - ansible_os_family == 'Debian'
  become: true

- name: Generate pgpoolII systemd unit file
  ansible.builtin.template:
    backup: true
    dest: "{{ pgpool2_systemd_config_file }}"
    src: ./templates/pgpool-II.unit.conf.template
    mode: 0644
  when:
    - pg_type == 'PG'
  become: true

# add systemd config file to ensure environment file is referenced correctly
- name: Generate pgpoolII systemd unit file for EPAS Debian
  ansible.builtin.template:
    backup: true
    dest: "{{ pgpool2_systemd_config_file }}"
    src: ./templates/pgpool.unit.debian.conf.template
    mode: 0644
  when:
    - pg_type == 'EPAS'
    - ansible_os_family == 'Debian'
  become: true

# ensure system can find PID file
- name: Insert PID location for Debian
  ansible.builtin.lineinfile:
    path: "{{ pgpool2_environment_file }}"
    line: PIDFILE={{ pgpool2_pid_file_name }}
  when:
    - ansible_os_family == 'Debian'
  become: true

# original pgpool2_start_script is not accurate for EPAS Debian
- name: Generate pgpoolII start bash script for EPAS Debian
  ansible.builtin.template:
    backup: true
    dest: "{{ pgpool2_start_script }}"
    src: ./templates/edb-pgpool.sh.template
    mode: 0755
  when:
    - pg_type == 'EPAS'
    - ansible_os_family == 'Debian'
  become: true

- name: Stop pgpoolII service
  ansible.builtin.systemd:
    name: "{{ pgpool2_service_name }}"
    state: stopped
  become: true

- name: Enable and start pgpoolII service
  ansible.builtin.systemd:
    name: "{{ pgpool2_service_name }}"
    enabled: true
    daemon_reload: true
    state: started
  become: true
