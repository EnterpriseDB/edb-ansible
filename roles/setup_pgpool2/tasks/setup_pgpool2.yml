---

- name: Set the os variable
  set_fact:
    os: "{{ ansible_distribution | replace('RedHat', 'RHEL') }}{{ ansible_distribution_major_version }}"

- name: Reference pg_type variables
  include_vars: "{{ pg_type }}.yml"

- name: Reference pg_type variables
  include_vars: "../../init_dbserver/vars/{{ pg_type }}.yml"

- name: Check support for Operating System
  fail:
    msg: "Operating System = {{ os }} not supported."
  when: os not in supported_os

- name: Check supported versions for Database engine
  fail:
    msg: "Database Engine Version = {{ pg_version }} not supported.
          Supported versions are {{ supported_pg_version }}"
  when: pg_version|int not in supported_pg_version

- name: Check supported versions for pgpoolII
  fail:
    msg: "pgpoolII Version = {{ pgpool2_version }} not supported.
          Supported versions are {{ supported_pgpool2_version }}"
  when:
    - pg_type == "EPAS"
    - pgpool2_version not in supported_pgpool2_version

- name: Check watchdog settings
  fail:
    msg: "Watchdog settings not valid: pgpool2_vip = '{{ pgpool2_vip }}',
          pgpool2_vip_dev = '{{ pgpool2_vip_dev }}'"
  when:
    - pgpool2_watchdog is true
    - (pgpool2_vip is not defined or pgpool2_vip|length == 0) or
      (pgpool2_vip_dev is not defined or pgpool2_vip_dev|length == 0)

- name: Set the service name
  set_fact:
    pgpool2_service_name: >-
      {% if pg_type == 'EPAS' %}edb-pgpool-{{ pgpool2_version }}{% elif pg_type == 'PG' %}pgpool-II-{{ pg_version }}{% endif %}

- name: Initialize local variables
  set_fact:
    pgpool2_backends: []
    pgpool2_nodes: []
    pgpool2_primary_public_ip: ""

- name: Build the list of Postgres backends
  set_fact:
    pgpool2_backends: >-
      {{ pgpool2_backends | default([]) }} + [
         {
           'private_ip': '{{ server.private_ip }}',
           'inventory_hostname': '{{ server.inventory_hostname }}'
         }
       ]
  loop: "{{ lookup('edb_devops.edb_postgres.pg_sr_cluster_nodes', hostvars[inventory_hostname].primary_private_ip, wantlist=True) }}"
  loop_control:
    loop_var: server

- name: Set the pgpool2_primary_public_ip variable
  set_fact:
    pgpool2_primary_public_ip: "{{ server.ansible_host }}"
  when:
    - server.node_type == 'primary'
  loop: "{{ lookup('edb_devops.edb_postgres.pg_sr_cluster_nodes', hostvars[inventory_hostname].primary_private_ip, wantlist=True) }}"
  loop_control:
    loop_var: server

- name: Build the list of pgpool2 nodes
  set_fact:
    pgpool2_nodes: "{{ pgpool2_nodes }} + [ '{{ hostvars[server_name].private_ip }}' ]"
  with_items: "{{ groups['pgpool2'] }}"
  loop_control:
    loop_var: server_name

- name: Include the pgpool2_install
  include_tasks: pgpool2_install.yml

- name: Include the pgpool2_setup
  include_tasks: pgpool2_setup.yml

- name: Include the pgpool2_setup_user_auth
  include_tasks: pgpool2_setup_user_auth.yml

- name: Include the pgpool2_configure_backends
  include_tasks: pgpool2_configure_backends.yml
  when:
    - pgpool2_backends|length > 0
    - pgpool2_primary_public_ip|length > 0

- name: Include the pgpool2_setup_sr_mode
  include_tasks: pgpool2_setup_sr_mode.yml
  when:
    - pgpool2_backends|length > 0
    - pgpool2_primary_public_ip|length > 0

- name: Include the pgpool2_setup_ssl
  include_tasks: pgpool2_setup_ssl.yml
  when:
    - pgpool2_ssl is true

- name: Include the pgpool2_configure_loadbalancing
  include_tasks: pgpool2_configure_loadbalancing.yml
  when:
    - pgpool2_load_balancing is true

- name: Include the pgpool2_configure_backend_pg_hba
  include_tasks:
    file: pgpool2_configure_backend_pg_hba.yml
    apply:
      delegate_to: "{{ server.ansible_host }}"
  loop: "{{ lookup('edb_devops.edb_postgres.pg_sr_cluster_nodes', hostvars[inventory_hostname].primary_private_ip, wantlist=True) }}"
  loop_control:
    loop_var: server
  when:
    - pgpool2_nodes|length > 0
  vars:
    pgpool2_node_list: "{{ pgpool2_nodes }}"

- name: Include the pgpool2_setup_watchdog
  include_tasks: pgpool2_setup_watchdog.yml
  when:
    - pgpool2_watchdog is true
  vars:
    pgpool2_node_list: "{{ pgpool2_nodes }}"
    pgpool2_current_node: "{{ hostvars[inventory_hostname].private_ip }}"

- name: Include the pgpool2_restart_service
  include_tasks: pgpool2_restart_service.yml

- name: Create and update pgpool2 database user
  include_tasks: pgpool2_create_db_user.yml

- name: Create pcp user for pgpool2
  include_tasks: pgpool2_create_pcp_user.yml
