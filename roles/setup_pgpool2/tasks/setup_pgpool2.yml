---

- name: Set the os variable
  ansible.builtin.set_fact:
    os: "{{ ansible_distribution | replace('RedHat', 'RHEL') }}{{ ansible_distribution_major_version }}"

- name: Reference pg_type variables
  ansible.builtin.include_vars: "{{ pg_type }}_{{ ansible_os_family }}.yml"

- name: Reference pg_type variables
  ansible.builtin.include_vars: "../../init_dbserver/vars/{{ pg_type }}_{{ ansible_os_family }}.yml"

- name: Check support for Operating System
  ansible.builtin.fail:
    msg: "Operating System = {{ os }} not supported."
  when: os not in supported_os

- name: Check supported versions for Database engine
  ansible.builtin.fail:
    msg: "Database Engine Version = {{ pg_version }} not supported.
          Supported versions are {{ supported_pg_version }}"
  when: pg_version|int not in supported_pg_version

- name: Check supported versions for pgpoolII
  ansible.builtin.fail:
    msg: "pgpoolII Version = {{ pgpool2_version }} not supported.
          Supported versions are {{ supported_pgpool2_version }}"
  when:
    - pg_type == "EPAS"
    - pgpool2_version not in supported_pgpool2_version

- name: Check watchdog settings
  ansible.builtin.fail:
    msg: "Watchdog settings not valid: pgpool2_vip = '{{ pgpool2_vip }}',
          pgpool2_vip_dev = '{{ pgpool2_vip_dev }}'"
  when:
    - pgpool2_watchdog
    - (pgpool2_vip is not defined or pgpool2_vip|length == 0) or
      (pgpool2_vip_dev is not defined or pgpool2_vip_dev|length == 0)

- name: Initialize local variables
  ansible.builtin.set_fact:
    _pgpool2_backends: []
    _pgpool2_node_list: []
    _pgpool2_ip_list: []
    _pgpool2_primary_inventory_hostname: ""
    _pg_cluster_nodes: "{{ lookup('edb_devops.edb_postgres.pg_sr_cluster_nodes', hostvars[inventory_hostname].primary_private_ip, wantlist=True) }}"
    _pgpool2_nodes: "{{ lookup('edb_devops.edb_postgres.pgpool2_nodes', hostvars[inventory_hostname].primary_private_ip, wantlist=True) }}"

- name: Set _pgpool2_current_node when not use_hostname
  ansible.builtin.set_fact:
    _pgpool2_current_node: "{{ hostvars[inventory_hostname].private_ip }}"
  when:
    - not use_hostname|bool

- name: Set _pgpool2_current_node when use_hostname
  ansible.builtin.set_fact:
    _pgpool2_current_node: "{{ ansible_hostname }}"
  when:
    - use_hostname|bool

- name: Build the list of Postgres backends when not use_hostname
  ansible.builtin.set_fact:
    _pgpool2_backends: >-
      {{ _pgpool2_backends | default([]) + [
          {
            'hostname': server.private_ip,
            'inventory_hostname': server.inventory_hostname
          }
        ] }}
  loop: "{{ _pg_cluster_nodes }}"
  loop_control:
    loop_var: server
  when:
    - not use_hostname|bool

- name: Build the list of Postgres backends when use_hostname
  ansible.builtin.set_fact:
    _pgpool2_backends: >-
      {{ _pgpool2_backends | default([]) + [
          {
            'hostname': server.inventory_hostname,
            'inventory_hostname': server.inventory_hostname
          }
        ] }}
  loop: "{{ _pg_cluster_nodes }}"
  loop_control:
    loop_var: server
  when:
    - use_hostname|bool

- name: Set the _pgpool2_primary_inventory_hostname variable
  ansible.builtin.set_fact:
    _pgpool2_primary_inventory_hostname: "{{ server.inventory_hostname }}"
  when:
    - server.node_type == 'primary'
  loop: "{{ _pg_cluster_nodes }}"
  loop_control:
    loop_var: server

- name: Build the list of pgpool2 IPs
  ansible.builtin.set_fact:
    _pgpool2_ip_list: >-
      {{ _pgpool2_ip_list | default([]) + [server.private_ip | string] }}
  loop: "{{ _pgpool2_nodes }}"
  loop_control:
    loop_var: server

- name: Build the list of pgpool2 nodes when not use_hostname
  ansible.builtin.set_fact:
    _pgpool2_node_list: >-
      {{ _pgpool2_node_list | default([]) + [server.private_ip | string] }}
  loop: "{{ _pgpool2_nodes }}"
  loop_control:
    loop_var: server
  when:
    - not use_hostname|bool

- name: Build the list of pgpool2 nodes when use_hostname
  ansible.builtin.set_fact:
    _pgpool2_node_list: >-
      {{ _pgpool2_node_list | default([]) + [server.hostname | string] }}
  loop: "{{ _pgpool2_nodes }}"
  loop_control:
    loop_var: server
  when:
    - use_hostname|bool

- name: Remove pgpool2 install and configuration based on force_pgpool2
  ansible.builtin.include_tasks: rm_pgpool2_install_config.yml
  when:
    - force_pgpool2 is defined
    - force_pgpool2

- name: Include the pgpool2_install
  ansible.builtin.include_tasks: pgpool2_install.yml

- name: Include the pgpool2_setup
  ansible.builtin.include_tasks: pgpool2_setup.yml

- name: Include the pgpool2_setup_user_auth
  ansible.builtin.include_tasks: pgpool2_setup_user_auth.yml

- name: Update /etc/hosts based on use_hostname
  become: true
  when:
    - use_hostname|bool
    - update_etc_file|bool
  block:
    - name: Update /etc/hosts
      ansible.builtin.import_tasks: linux_update_etc_hosts.yml

- name: Include the pgpool2_configure_backends
  ansible.builtin.include_tasks: pgpool2_configure_backends.yml
  when:
    - _pgpool2_backends|length > 0
    - _pgpool2_primary_inventory_hostname|length > 0
  vars:
    pgpool2_backends: "{{ _pgpool2_backends }}"

- name: Include the pgpool2_setup_sr_mode
  ansible.builtin.include_tasks: pgpool2_setup_sr_mode.yml
  when:
    - _pgpool2_backends|length > 0
    - _pgpool2_primary_inventory_hostname|length > 0
  vars:
    pgpool2_primary_inventory_hostname: "{{ _pgpool2_primary_inventory_hostname }}"

- name: Include the pgpool2_setup_ssl
  ansible.builtin.include_tasks: pgpool2_setup_ssl.yml
  when:
    - pgpool2_ssl

- name: Include the pgpool2_configure_loadbalancing
  ansible.builtin.include_tasks: pgpool2_configure_loadbalancing.yml
  when:
    - pgpool2_load_balancing

- name: Include the pgpool2_configure_backend_pg_hba
  ansible.builtin.include_tasks:
    file: pgpool2_configure_backend_pg_hba.yml
    apply:
      delegate_to: "{{ server.inventory_hostname }}"
  loop: "{{ _pg_cluster_nodes }}"
  loop_control:
    loop_var: server
  when:
    - _pgpool2_ip_list|length > 0
  vars:
    pgpool2_ip_list: "{{ _pgpool2_ip_list }}"

- name: Include the pgpool2_setup_watchdog
  ansible.builtin.include_tasks: pgpool2_setup_watchdog.yml
  when:
    - pgpool2_watchdog
  vars:
    pgpool2_node_list: "{{ _pgpool2_node_list }}"
    pgpool2_current_node: "{{ _pgpool2_current_node }}"

- name: Include the pgpool2_set_node_id
  ansible.builtin.include_tasks: pgpool2_set_node_id.yml
  vars:
    pgpool2_nodes: "{{ _pgpool2_nodes }}"

- name: Include the pgpool2_restart_service
  ansible.builtin.include_tasks: pgpool2_restart_service.yml

- name: Create and update pgpool2 database user
  ansible.builtin.include_tasks: pgpool2_create_db_user.yml
  vars:
    pgpool2_primary_inventory_hostname: "{{ _pgpool2_primary_inventory_hostname }}"

- name: Create pcp user for pgpool2
  ansible.builtin.include_tasks: pgpool2_create_pcp_user.yml
