---
# Configure pgpoolII SR checking and streaming replication

# Build random password for pgpool2_sr_user if needed
- name: Build random password for pgpool2_sr_user
  set_fact:
    pgpool2_sr_check_password: >-
      {{ lookup('password', '/dev/null chars=ascii_letters,digits length=12') }}
  run_once: true
  when:
    - pgpool2_sr_check_password|length == 0

- name: Check if there are other users
  set_fact:
    pgpool2_sr_check_password: "{{ pgpool2_user.password }}"
  loop: "{{ pgpool2_user_map }}"
  loop_control:
    loop_var: pgpool2_user
  when: pgpool2_user.name == pgpool2_sr_check_user
  register: sr_user_exist
  no_log: "{{ disable_logging }}"

- name: Add pgpool2_sr_check_password if not exist in user map
  set_fact:
    pgpool2_user_map: >-
     {{ pgpool2_user_map | default([]) + [
            {
              'name' : pgpool2_sr_check_user,
              'password' : pgpool2_sr_check_password
            }
          ] }}
  run_once: true
  when:
    - pgpool2_user_map is defined
    - sr_user_exist is skipped
  no_log: "{{ disable_logging }}"

# Create pgpool2_sr_user Postgres user on the primary node
- name: Create pgpoolII SR check role on Postgres primary node
  include_role:
    name: manage_dbserver
    tasks_from: manage_users
    apply:
      delegate_to: "{{ pgpool2_primary_inventory_hostname }}"
  vars:
    pg_users:
      - name: "{{ pgpool2_sr_check_user }}"
        pass: "{{ pgpool2_sr_check_password }}"
        role_attr_flags: login
  run_once: true
  when:
    - pgpool2_primary_inventory_hostname is defined
    - pgpool2_primary_inventory_hostname|length > 0

# grant monitoring privilege to pgpool2 user for replication status
- name: Grant execute privileges on system functions to pgpoolII sr user
  include_role:
    name: manage_dbserver
    tasks_from: manage_roles
    apply:
      delegate_to: "{{ pgpool2_primary_inventory_hostname }}"
  vars:
    pg_grant_roles:
      - user: "{{ pgpool2_sr_check_user }}"
        role: "pg_monitor"
  run_once: true
  when:
    - pgpool2_primary_inventory_hostname is defined
    - pgpool2_primary_inventory_hostname|length > 0

- name: Build pgpoolII SR configuration
  set_fact:
    pgpool2_sr_configuration: >-
      [
        {
          'key': 'backend_clustering_mode',
          'value': 'streaming_replication',
          'state': 'present',
          'quoted': true
        },
        {
          'key': 'sr_check_period',
          'value': 1,
          'state': 'present',
          'quoted': false
        },
        {
          'key': 'sr_check_user',
          'value': '{{ pgpool2_sr_check_user }}',
          'state': 'present',
          'quoted': true
        },
        {
          'key': 'sr_check_password',
          'value': '{{ pgpool2_sr_check_password }}',
          'state': 'present',
          'quoted': true
        },
        {
          'key': 'sr_check_database',
          'value': '{{ pg_database }}',
          'state': 'present',
          'quoted': true
        }
      ]

# Apply configuration changes
- name: Include pgpool2_manage_configuration
  include_role:
    name: manage_pgpool2
    tasks_from: pgpool2_manage_configuration
  vars:
    pgpool2_configuration_lines: "{{ pgpool2_sr_configuration }}"
