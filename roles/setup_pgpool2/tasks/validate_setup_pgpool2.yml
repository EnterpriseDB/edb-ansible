---
- name: Install psycopg2 package
  ansible.builtin.package:
    name: python3-psycopg2
    state: present
  become: true

# test if service is running
- name: Gather service facts
  ansible.builtin.service_facts:

- name: Set pgpool2 service name for checking service_facts
  ansible.builtin.set_fact:
    check_pgpool2_service: "{{ pgpool2_service_name }}.service"

- name: Check if service pgpool2_service_name is running and enabled
  ansible.builtin.assert:
    that:
      - ansible_facts.services[check_pgpool2_service]['state'] == 'running'
      - ansible_facts.services[check_pgpool2_service]['status'] == 'enabled'
    fail_msg: "The service {{ pgpool2_service_name }} is not running."
    success_msg: "The service {{ pgpool2_service_name }} is running."

# test openssl and pgpool2 packages
- name: Set packages to check for PG RedHat
  ansible.builtin.set_fact:
    pgpool2_packages_check: "{{ pgpool2_packages_check | default([]) + ['pgpool-II'] }}"
  when:
    - pg_type == 'PG'
    - ansible_os_family == 'RedHat'

- name: Set packages to check for PG Debian
  ansible.builtin.set_fact:
    pgpool2_packages_check: "{{ pgpool2_packages_check | default([]) + ['pgpool2'] }}"
  when:
    - pg_type == 'PG'
    - ansible_os_family == 'Debian'

- name: Set packages to check for EPAS
  ansible.builtin.set_fact:
    pgpool2_packages_check: "{{ pgpool2_packages_check | default([]) + ['edb-pgpool' + pgpool2_version | string | replace('.', '')] }}"
  when:
    - pg_type == 'EPAS'

- name: Set packages to check for if pgpool2_ssl is true
  ansible.builtin.set_fact:
    pgpool2_packages_check: "{{ pgpool2_packages_check | default([]) + ['openssl'] }}"
  when:
    - pgpool2_ssl|bool

- name: Gather the package facts
  ansible.builtin.package_facts:
    strategy: "all"

- name: Check that all required pgpool2 packages have been installed
  ansible.builtin.assert:
    that:
      - ansible_facts.packages[package] is defined
    fail_msg: "Package {{ package }} has not been installed."
    success_msg: "Package {{ package }} has been installed."
  loop: "{{ pgpool2_packages_check }}"
  loop_control:
    loop_var: package

# test if pgpool user was created
- name: Run query to check if pg_pgpool_user was setup correctly
  ansible.builtin.include_role:
    name: manage_dbserver
    tasks_from: execute_sql_scripts
    apply:
      delegate_to: "{{ _pgpool2_primary_inventory_hostname }}"
      run_once: true
  vars:
    pg_query:
      - query: "Select * from pg_user where usename = '{{ pg_pgpool_user }}'"
        db: "{{ pg_pgpool_database }}"

- name: Set pgpool_user_query_result with sql_query_output
  ansible.builtin.set_fact:
    pgpool_user_query_result: "{{ sql_query_output }}"
  become: true

- name: Check if pg_pgpool_user is in query results
  ansible.builtin.assert:
    that:
      - pgpool_user_query_result.results[0].query_result[0]['usename'] == pg_pgpool_user
    fail_msg: "User {{ pg_pgpool_user }} was not created correctly."
    success_msg: "User {{ pg_pgpool_user }} was created correctly."

# test if load balancing is on when pgpool2_load_balancing is true
- name: Generate test user
  ansible.builtin.set_fact:
    pgpool2_test_user: "test_user"
    pgpool2_test_user_password: ""

- name: Generate the pgpool2_test_user_password
  ansible.builtin.include_role:
    name: manage_dbserver
    tasks_from: generate_password
  vars:
    input_user: "{{ pgpool2_test_user }}"
    input_password: "{{ pgpool2_test_user_password }}"
  no_log: "{{ disable_logging }}"
  run_once: true
  when: pgpool2_test_user_password|length < 1

- name: Set pgpool2_test_user_password
  ansible.builtin.set_fact:
    pgpool2_test_user_password: "{{ input_password }}"
  when: pgpool2_test_user_password|length < 1
  run_once: true

- name: Add pgpool2_test_user
  ansible.builtin.include_role:
    name: manage_dbserver
    tasks_from: manage_users
    apply:
      delegate_to: "{{ _pgpool2_primary_inventory_hostname }}"
  vars:
    pg_users:
      - name: "{{ pgpool2_test_user }}"
        pass: "{{ pgpool2_test_user_password }}"
        pg_database: "{{ pg_pgpool_database }}"
  no_log: "{{ disable_logging }}"
  when: pgpool2_test_user_password|length > 1
  run_once: true

- name: Add pgpool2_test_user
  ansible.builtin.include_role:
    name: manage_pgpool2
    tasks_from: pgpool2_manage_users
  vars:
    pgpool2_users:
      - name: "{{ pgpool2_test_user }}"
        pass: "{{ pgpool2_test_user_password }}"
        auth: scram
  no_log: "{{ disable_logging }}"
  when: pgpool2_test_user_password|length > 1

- name: Run query to check if load_balance_mode is on
  ansible.builtin.include_role:
    name: manage_dbserver
    tasks_from: execute_sql_scripts
    apply:
      run_once: true
  vars:
    pg_query:
      - query: "PGPOOL SHOW load_balance_mode"
        db: "{{ pg_pgpool_database }}"
        host: '127.0.0.1'
        port: "{{ pgpool2_port }}"
        login_user: "{{ pgpool2_test_user }}"
        login_password: "{{ pgpool2_test_user_password }}"
        login_socket: ""
  when: pgpool2_load_balancing

- name: Set pgpool_load_balance_query_result with sql_query_output
  ansible.builtin.set_fact:
    pgpool_load_balance_query_result: "{{ sql_query_output }}"
  become: true
  when: pgpool2_load_balancing

- name: Check if load_balance_mode is 'on'
  ansible.builtin.assert:
    that:
      - pgpool_load_balance_query_result.results[0].query_result[0]['load_balance_mode'] == 'on'
    fail_msg: "Load balance is not enabled"
    success_msg: "Load balance is correctly enabled"
  when: pgpool2_load_balancing

- name: Remove pgpool2_test_user from database
  ansible.builtin.include_role:
    name: manage_dbserver
    tasks_from: manage_users
    apply:
      delegate_to: "{{ _pgpool2_primary_inventory_hostname }}"
  vars:
    pg_users:
      - name: "{{ pgpool2_test_user }}"
        pass: "{{ pgpool2_test_user_password }}"
        pg_database: "{{ pg_pgpool_database }}"
        state: absent
  no_log: "{{ disable_logging }}"
  when: pgpool2_test_user_password|length > 1
  run_once: true

- name: Remove pgpool2_test_user from pgpool2
  ansible.builtin.include_role:
    name: manage_pgpool2
    tasks_from: pgpool2_manage_users
  vars:
    pgpool2_users:
      - name: "{{ pgpool2_test_user }}"
        pass: "{{ pgpool2_test_user_password }}"
        state: 'absent'
  no_log: "{{ disable_logging }}"
  when: pgpool2_test_user_password|length > 1

- name: Reload pgpool2 service after changing pool_passwd file
  ansible.builtin.include_tasks: pgpool2_restart_service.yml

- name: Reset variables
  ansible.builtin.set_fact:
    pgpool2_packages_check: null
    pgpool_user_query_result: null
    pgpool2_test_user: null
    pgpool2_test_user_password: null
    pgpool_load_balance_query_result: null
