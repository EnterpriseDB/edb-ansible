---
# validate pgbackrest package
- name: Gather the package facts
  ansible.builtin.package_facts:
    strategy: "all"

- name: Check that all required packages have been installed
  ansible.builtin.assert:
    that:
      - ansible_facts.packages[pgbackrest_package_name] is defined
    fail_msg: "Package {{ pgbackrest_package_name }} has not been installed."
    success_msg: "Package {{ pgbackrest_package_name }} has been installed."

# validate pgbackrest configuration file
- name: Stat to pgbackrest_configuration_file
  ansible.builtin.stat:
    path: "{{ pgbackrest_configuration_file }}"
  register: pgbackrest_config_stat

- name: Check that pgbackrest_configuration_file was created
  ansible.builtin.assert:
    that:
      - pgbackrest_config_stat.stat['gr_name'] == pgbackrest_group
      - pgbackrest_config_stat.stat['pw_name'] == pgbackrest_user
    fail_msg: "The file {{ pgbackrest_configuration_file }} is not configured correctly."
    success_msg: "The file {{ pgbackrest_configuration_file }} is configured correctly."

# validate pgbackrest config check
# b/c setup_pgbackrest is done after setup_pgbackrestserver, this task fails because the stanza hasn't been created yet
- name: Run command to check if pgbackrest server has been configured correctly
  ansible.builtin.shell:
    cmd: pgbackrest --stanza={{ pg_instance_name }} check
  become: true
  become_user: "{{ pgbackrest_user }}"
  run_once: true
  register: pgbackrest_config_check_res

- name: Check if pgbackrest server has been configured correctly.
  ansible.builtin.assert:
    that:
      - pgbackrest_config_check_res.stdout_lines is search('Completed successfully')
    fail_msg: "Configuration for pgBackRest server node is not properly done."
    success_msg: "Configuration for pgBackRest server node is properly done."
  run_once: true

- name: Reset variables
  ansible.builtin.set_fact:
    pgbackrest_config_stat: null
    pgbackrest_config_check_res: null
