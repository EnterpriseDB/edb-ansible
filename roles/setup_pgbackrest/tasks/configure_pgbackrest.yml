---
- name: Get pgBackRest server informations
  set_fact:
    _pgbackrest_server_info: "{{ lookup('edb_devops.edb_postgres.pgbackrest_server', wantlist=True) }}"

- name: Fail if pgbackrest server informations are not found
  fail:
    msg: "Unable to find pgBackRest server informations"
  when:
    - _pgbackrest_server_info|length == 0

- name: Set _pgbackrest_server_public_ip
  set_fact:
    _pgbackrest_server_public_ip: "{{ _pgbackrest_server_info[0].ansible_host }}"

- name: Set _pg_host when not using hostname
  set_fact:
    _pgbackrest_host: "{{ _pgbackrest_server_info[0].private_ip }}"
  when:
    - "not use_hostname|bool"

- name: Set _pgbackrest_host when using hostname
  set_fact:
    _pgbackrest_host: "{{ _pgbackrest_server_info[0].inventory_hostname }}"
  when:
    - use_hostname|bool

- name: Build configuration file {{ pgbackrest_configuration_file }}
  template:
    src: "./templates/pgbackrest_{{ group_names[0] }}.conf.template"
    dest: "{{ pgbackrest_configuration_file }}"
    owner: "{{ pg_owner }}"
    group: "{{ pg_group }}"
    mode: 0700
  become: yes
  vars:
    pgbackrest_host: "{{ _pgbackrest_host }}"


#- name: Configure if more than one standby node
#  ansible.builtin.blockinfile:
#    path: "{{ pgbackrest_configuration_file }}"
#    block: |
#      pg(idx+2)-path=pg_data
#      pg(idx+2)-host=standby_node_hostname[idx]
#      {% if pg_type == 'EPAS' %}
#      pg(idx+2)-host-user=standby_host_user
#      {% endif %}
#    loop: "{{ standby_node_hostname }}"
#    loop_control:
#      index_var: idx
#    when:
#      - idx not 0
#      - standby_node_hostname|length > 1

- name: Reset local variables
  set_fact:
    _pgbackrest_server_info: ""
    _pgbackrest_server_public_ip: null
    _pgbackrest_host: null
