---
- name: Get pgBackRest server informations
  set_fact:
    _pgbackrest_server_info: "{{ lookup('edb_devops.edb_postgres.pgbackrest_server', wantlist=True) }}"

- name: Fail if pgbackrest server informations are not found
  fail:
    msg: "Unable to find pgBackRest server informations"
  when:
    - _pgbackrest_server_info|length == 0

- name: Set _pgbackrest_server_public_ip
  set_fact:
    _pgbackrest_server_public_ip: "{{ _pgbackrest_server_info[0].ansible_host }}"

- name: Set _pg_host when not using hostname
  set_fact:
    _pgbackrest_host: "{{ hostvars[inventory_hostname].private_ip }}"
  when:
    - "not use_hostname|bool"
    - hostvars[inventory_hostname].primay_vip is not defined

- name: Set _pgbackrest_host when using hostname
  set_fact:
    _pgbackrest_host: "{{ inventory_hostname }}"
  when:
    - use_hostname|bool
    - hostvars[inventory_hostname].primay_vip is not defined

- name: Set _pg_host when using virtual ip address
  set_fact:
    _pgbackrest_host: "{{ hostvars[inventory_hostname].pgbackrest_primary_vip }}"
  when:
    - hostvars[inventory_hostname].pgbackrest_primary_vip is defined

# the delegate_to should be to the nodes with pgbackrest: true defined
- name: Build configuration file {{ pgbackrest_configuration_file }}
  template:
    src: "./templates/pgbackrest.conf.template"
    dest: "{{ pgbackrest_configuration_file }}"
    owner: "{{ pg_owner }}"
    group: "{{ pg_group }}"
    mode: 0700
  become: yes
  vars:
    pgbackrest_host: "{{ _pgbackrest_host }}"

- name: Reset local variables
  set_fact:
    _pgbackrest_server_info: ""
    _pgbackrest_server_public_ip: null
    _pgbackrest_host: null
