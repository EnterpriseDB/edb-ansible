---
- name: Get pgBackRest server informations
  ansible.builtin.set_fact:
    _pgbackrest_server_info: "{{ lookup('edb_devops.edb_postgres.pgbackrest_server', wantlist=True) }}"

- name: Fail if pgBackRest server informations are not found
  ansible.builtin.fail:
    msg: "Unable to find pgbackrest server informations"
  when:
    - _pgbackrest_server_info|length == 0

- name: Set _pgbackrest_server_public_ip
  ansible.builtin.set_fact:
    _pgbackrest_server_inventory_hostname: "{{ _pgbackrest_server_info[0].inventory_hostname }}"

- name: Set _pg_host and _pgbackrest_host when not using hostname
  ansible.builtin.set_fact:
    _pg_host: "{{ hostvars[inventory_hostname].private_ip }}"
    _pgbackrest_host: "{{ _pgbackrest_server_info[0].private_ip }}"
  when:
    - "not use_hostname|bool"

- name: Set _pg_host and _pgbackrest_host when using hostname
  ansible.builtin.set_fact:
    _pg_host: "{{ inventory_hostname }}"
    _pgbackrest_host: "{{ _pgbackrest_server_info[0].inventory_hostname }}"
  when:
    - use_hostname|bool

- name: Fetch pgBackRest server SSH public key
  ansible.builtin.slurp:
    src: "{{ pgbackrest_home + '/.ssh/id_rsa.pub' }}"
  delegate_to: "{{ _pgbackrest_server_inventory_hostname }}"
  register: _pgbackrest_server_ssh_public_key_b64
  become: true

- name: Set _pgbackrest_server_ssh_public_key
  ansible.builtin.set_fact:
    _pgbackrest_server_ssh_public_key: "{{ _pgbackrest_server_ssh_public_key_b64.content | b64decode | trim }}"

- name: Fetch pg_owner SSH public key
  ansible.builtin.slurp:
    src: "{{ pg_user_home + '/.ssh/id_rsa.pub' }}"
  register: _pg_ssh_public_key_b64
  become: true

- name: Set _pg_ssh_public_key
  ansible.builtin.set_fact:
    _pg_ssh_public_key: "{{ _pg_ssh_public_key_b64.content | b64decode | trim }}"

- name: Ensure pg_owner SSH public key is on the pgbackrest server
  ansible.builtin.lineinfile:
    path: "{{ pgbackrest_home + '/.ssh/authorized_keys' }}"
    owner: "{{ pgbackrest_user }}"
    group: "{{ pgbackrest_group }}"
    mode: 0600
    line: "{{ _pg_ssh_public_key }}"
    create: true
  delegate_to: "{{ _pgbackrest_server_inventory_hostname }}"
  become: true

- name: Ensure pgbackrest_user SSH public key is on the Postgres server
  ansible.builtin.lineinfile:
    path: "{{ pg_user_home + '/.ssh/authorized_keys' }}"
    owner: "{{ pg_owner }}"
    group: "{{ pg_group }}"
    mode: 0600
    line: "{{ _pgbackrest_server_ssh_public_key }}"
    create: true

- name: Run ssh-keyscan from the pgBackRest server
  ansible.builtin.command: ssh-keyscan {{ _pg_host }}
  register: _pgbackrest_ssh_keyscan_output
  delegate_to: "{{ _pgbackrest_server_inventory_hostname }}"
  delegate_facts: true
  become: true
  changed_when: false

- name: Add pg_owner SSH public key into pgbackrest_server known hosts
  ansible.builtin.known_hosts:
    path: "{{ pgbackrest_home + '/.ssh/known_hosts' }}"
    name: "{{ _pg_host }}"
    key: "{{ _item }}"
  with_items: "{{ _pgbackrest_ssh_keyscan_output.stdout_lines }}"
  loop_control:
    loop_var: _item
  delegate_to: "{{ _pgbackrest_server_inventory_hostname }}"
  become: true
  become_user: "{{ pgbackrest_user }}"
  no_log: "{{ disable_logging }}"

- name: Run ssh-keyscan from the Postgres server
  ansible.builtin.command: ssh-keyscan {{ _pgbackrest_host }}
  register: _pg_ssh_keyscan_output
  become: true
  changed_when: false

- name: Add pgbackrest_user SSH public key into Postgres server known hosts
  ansible.builtin.known_hosts:
    path: "{{ pg_user_home + '/.ssh/known_hosts' }}"
    name: "{{ _pgbackrest_host }}"
    key: "{{ _item }}"
  with_items: "{{ _pg_ssh_keyscan_output.stdout_lines }}"
  loop_control:
    loop_var: _item
  become: true
  become_user: "{{ pg_owner }}"
  no_log: "{{ disable_logging }}"

- name: Reset local variables
  ansible.builtin.set_fact:
    _pgbackrest_server_info: ""
    _pg_host: null
    _pgbackrest_host: null
    _pgbackrest_server_inventory_hostname: null
