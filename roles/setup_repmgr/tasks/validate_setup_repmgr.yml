---
# validate repmgr service
- name: Gather service facts
  ansible.builtin.service_facts:

- name: Check if repmgr service is running
  ansible.builtin.assert:
    that:
      - ansible_facts.services[repmgrd_service + '.service']['state'] == 'running'
    fail_msg: "The service {{ repmgrd_service }} is not running."
    success_msg: "The service {{ repmgrd_service }} is running."

# validate repmgr packages
- name: Gather the package facts
  ansible.builtin.package_facts:
    strategy: "all"

- name: Check that all required packages have been installed on RedHat
  ansible.builtin.assert:
    that:
      - ansible_facts.packages[repmgr_package_name] is defined"
    fail_msg: "Package {{ repmgr_package_name }} has not been installed."
    success_msg: "Package {{ repmgr_package_name }} has been installed."

# validate repmgr user
- name: Run postgres query to check if repmgr user is present
  community.postgresql.postgresql_query:
    db: "{{ pg_database }}"
    login_unix_socket: "{{ pg_unix_socket_directories[0] }}"
    port: "{{ pg_port }}"
    login_user: "{{ pg_owner }}"
    query: "Select * from pg_user where usename = 'repmgr'"
  become_user: "{{ pg_owner }}"
  become: true
  register: repmgr_query_res

- name: Check if repmgr user is present on all nodes
  ansible.builtin.assert:
    that:
      - repmgr_query_res.query_result[0]['usename'] == 'repmgr'
    fail_msg: "User 'repmgr' was not successfully created"
    success_msg: "User 'repmgr' was successfully created"

# validate repmgr node status
- name: Run command to check repmgr node status on RedHat
  ansible.builtin.shell:
    cmd: /usr/pgsql-{{ pg_version }}/bin/repmgr -f /etc/repmgr/{{ pg_version }}/repmgr-main.conf node status
  become: true
  become_user: "{{ pg_owner }}"
  register: repmgr_node_status_res
  when: ansible_os_family == 'RedHat'

- name: Run command to check repmgr node status on Debian
  ansible.builtin.shell:
    cmd: repmgr -f /etc/repmgr.conf node status
  become: true
  become_user: "{{ pg_owner }}"
  register: repmgr_node_status_res
  when: ansible_os_family == 'Debian'

- name: Debug
  ansible.builtin.debug:
    msg: "{{ repmgr_node_status_res }}"

#- name: Check if repmgr node can check status correctly
#  ansible.builtin.assert:
#    that:
#      - efm_cluster_check_res.stdout_lines|length == efm_cluster_nodes|length
#    fail_msg: "repmgr command node status failed"
#    success_msg: "repmgr command node status was successful"

# validate repmgr node setup
- name: Run command to check repmgr node check on RedHat
  ansible.builtin.shell:
    cmd: /usr/pgsql-{{ pg_version }}/bin/repmgr -f /etc/repmgr/{{ pg_version }}/repmgr-main.conf node check
  become: true
  become_user: "{{ pg_owner }}"
  register: repmgr_node_check_res
  when: ansible_os_family == 'RedHat'

- name: Run command to check repmgr node check on Debian
  ansible.builtin.shell:
    cmd: repmgr -f /etc/repmgr.conf node check
  become: true
  become_user: "{{ pg_owner }}"
  register: repmgr_node_check_res
  when: ansible_os_family == 'Debian'

- name: Debug
  ansible.builtin.debug:
    msg: "{{ repmgr_node_check_res }}"

#- name: Fail
#  ansible.builtin.fail:
#    msg: "Fail Here"

#- name: Check if repmgr node can check node correctly
#  ansible.builtin.assert:
#    that:
#      - efm_cluster_check_res.stdout_lines|length == efm_cluster_nodes|length
#    fail_msg: "repmgr command node check failed"
#    success_msg: "repmgr command node check was successful"

- name: Reset variables
  ansible.builtin.set_fact:
    repmgr_query_res: null
    repmgr_node_status_res: null
    repmgr_node_check_res: null
