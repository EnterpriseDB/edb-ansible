- name: Make sure /var/log/repmgr exists
  ansible.builtin.file:
    path: /var/log/repmgr
    owner: "{{ pg_owner }}"
    group: "{{ pg_group }}"
    state: directory
    mode: "0755"
  become: true

- name: Register repmgr node
  ansible.builtin.shell: |
    set -o pipefail
    {{ pg_bin_path }}/repmgr \
      -f {{ repmgr_configuration_file }} \
      {{ repmgr_role }} register -F &>> /var/log/repmgr/register.log
  args:
    executable: /bin/bash
  become: true
  become_user: "{{ pg_owner }}"
  throttle: 1
  when: "repmgr_role in ('primary', 'standby')"

# update standby slot_name
- name: Update standby slot_name
  community.postgresql.postgresql_query:
    db: "{{ pg_repmgr_dbname }}"
    login_unix_socket: "{{ pg_unix_socket_directories[0] }}"
    port: "{{ pg_port }}"
    login_user: "{{ pg_owner }}"
    query: "update repmgr.nodes as n set slot_name=s.slot_name from pg_replication_slots s, pg_stat_replication r where r.pid=s.active_pid and n.node_name=r.application_name and n.type='standby'"
  become_user: "{{ pg_owner }}"
  become: true
  delegate_to: "{{ repmgr_primary_info.private_ip }}"
  when: "repmgr_role in ('standby')"

- name: Register repmgr witness node
  ansible.builtin.shell: |
    set -o pipefail
    {{ pg_bin_path }}/repmgr \
      -f {{ repmgr_configuration_file }} \
      {{ repmgr_role }} register -F -h {{ repmgr_primary_info.private_ip }} &>> /var/log/repmgr/register.log
  args:
    executable: /bin/bash
  become: true
  become_user: "{{ pg_owner }}"
  throttle: 1
  when: "repmgr_role in ('witness')"
