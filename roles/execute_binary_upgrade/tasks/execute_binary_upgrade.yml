---
- name: Reference pg_type variables
  ansible.builtin.include_vars: "{{ pg_type }}_{{ ansible_os_family }}.yml"

- name: Set the os variable
  ansible.builtin.set_fact:
    os: "{{ ansible_distribution }}{{ ansible_distribution_major_version }}"

- name: Check support for Operating System
  ansible.builtin.fail:
    msg: "Operating System = {{ os }} not supported."
  when: os not in supported_os

- name: Check supported old version for Database engine
  ansible.builtin.fail:
    msg: "Database Engine Version = {{ old_pg_version }} not supported.
          Supported versions are {{ supported_old_pg_version }}"
  when: old_pg_version|int not in supported_old_pg_version

- name: Check supported new version for Database engine
  ansible.builtin.fail:
    msg: "Database Engine Version = {{ new_pg_version }} not supported.
          Supported versions are {{ supported_new_pg_version }}"
  when: new_pg_version|int not in supported_new_pg_version

- name: Check that old_pg_version and new_pg_version are compatible with each other
  ansible.builtin.fail:
    msg: "old_pg_version = {{ old_pg_version }} must be less than new_pg_version = {{ new_pg_version }}"
  when: old_pg_version|int >= new_pg_version|int

- name: Gather the cluster_nodes information
  ansible.builtin.set_fact:
    pg_cluster_nodes: "{{ lookup('edb_devops.edb_postgres.pg_sr_cluster_nodes', wantlist=True) }}"
    _standby_private_ip: []
    _standby_inventory_hostname: []

- name: Get the standby information
  ansible.builtin.set_fact:
    _standby_private_ip: "{{ _standby_private_ip | default([]) + [node.private_ip] }}"
    _standby_inventory_hostname: "{{ _standby_inventory_hostname | default([]) + [node.inventory_hostname] }}"
  loop: "{{ pg_cluster_nodes }}"
  loop_control:
    loop_var: node
  when: node.node_type == 'standby'
  run_once: true
  no_log: "{{ disable_logging }}"

# check the latest checkpoint location is the same on all servers
- name: Check the pg_upgrade compatibility
  ansible.builtin.shell: |
    set -o pipefail
    {{ old_pg_bin_path }}/pg_controldata -D {{ old_pg_data }} | grep 'Latest checkpoint location'
  args:
    executable: /bin/bash
  register: pg_controldata_check
  become: true
  become_user: "{{ pg_owner }}"
  when:
    - _standby_private_ip|length > 0

- name: Debug
  ansible.builtin.debug:
    var: pg_controldata_check

- name: Check that all latest checkpoint locations are the same
  ansible.builtin.assert:
    that:
      - hostvars[node.inventory_hostname]['pg_controldata_check'].stdout == pg_controldata_check.stdout
    fail_msg: "Nodes are not all up to date. Are all nodes running?"
    quiet: true
  loop: "{{ pg_cluster_nodes }}"
  loop_control:
    loop_var: node
  run_once: true
  when:
    - _standby_private_ip|length > 0

- name: Install new Postgres binaries
  ansible.builtin.include_tasks: "{{ pg_type }}_install.yml"
  when:
    - not validate_only|bool

- name: Initialize and run pg_upgrade on primary nodes
  when:
    - not validate_only|bool
    - "'primary' in group_names"
  become: true
  block:
    - name: Create new Postgres directories
      ansible.builtin.include_tasks: create_directories.yml
    - name: Setup systemd on RedHat
      ansible.builtin.include_tasks: setup_systemd.yml
    - name: Initialize new Postgres cluster
      ansible.builtin.include_tasks: init_new_dbserver.yml
    - name: Execute pg_upgrade
      ansible.builtin.include_tasks: pg_upgrade.yml

- name: Include upgrade_standbys when not use_link_method
  ansible.builtin.include_tasks: upgrade_standbys.yml
  when:
    - not use_link_method|bool
    - not validate_only|bool
    - _standby_private_ip|length > 0

- name: Include upgrade_standbys_link when use_link_method
  ansible.builtin.include_tasks: "upgrade_standbys_link_{{ ansible_os_family }}.yml"
  when:
    - use_link_method|bool
    - not validate_only|bool
    - _standby_private_ip|length > 0

- name: Delete old cluster information
  ansible.builtin.include_tasks: delete_old_cluster.yml
  when:
    - delete_old_cluster|bool
    - not validate_only|bool

- name: Import validation tasks
  ansible.builtin.import_tasks: validate_execute_binary_upgrade.yml
  when:
    - validate_only|bool or use_validation|bool
