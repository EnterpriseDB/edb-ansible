---
- name: Gather the cluster_nodes information
  ansible.builtin.set_fact:
    pg_cluster_nodes: "{{ lookup('edb_devops.edb_postgres.pg_sr_cluster_nodes', wantlist=True) }}"
    _standby_private_ip: []

- name: Get the standby information
  ansible.builtin.set_fact:
    _standby_private_ip: "{{ _standby_private_ip | default([]) + [node.private_ip] }}"
  loop: "{{ pg_cluster_nodes }}"
  loop_control:
    loop_var: node
  when: node.node_type == 'standby'
  run_once: true
  no_log: "{{ disable_logging }}"

- name: Include the SSH keys generation tasks
  ansible.builtin.include_tasks: generate_ssh_keys.yml

- name: Include the SSH keys exchange tasks
  ansible.builtin.include_tasks: exchange_ssh_keys.yml

- name: Install rsync on primary
  ansible.builtin.package:
    name:
      - rsync
    state: present
    update_cache: true
  become: true

- name: Include the setup_systemd tasks for RedHat
  ansible.builtin.include_tasks: setup_systemd.yml
  when: ansible_os_family == 'RedHat'

# pg_dumpall on standby

- name: Stop old_pg_service
  ansible.builtin.systemd:
    name: "{{ old_pg_service }}"
    state: stopped
    enabled: false
  become: true
  when:
    - "'standby' in group_names"

- name: Create /tmp/pgupgrade directory
  ansible.builtin.file:
    path: /tmp/pgupgrade
    owner: "{{ pg_owner }}"
    group: "{{ pg_group }}"
    mode: "0700"
    state: directory
  become: true

- name: Save files to tmp/pgupgrade on RedHat
  ansible.builtin.copy:
    src: "{{ old_pg_data }}/{{ item }}"
    dest: "/tmp/pgupgrade/{{ item }}"
    mode: preserve
    remote_src: true
  become: true
  when:
    - "'standby' in group_names"
    - ansible_os_family == 'RedHat'
  loop:
    - postgresql.conf
    - postgresql.auto.conf
    - pg_hba.conf

- name: Save postgresql.auto.conf to tmp/pgupgrade on Debian
  ansible.builtin.copy:
    src: "{{ old_pg_data }}/postgresql.auto.conf"
    dest: /tmp/pgupgrade/postgresql.auto.conf
    mode: preserve
    remote_src: true
  become: true
  when:
    - "'standby' in group_names"
    - ansible_os_family == 'Debian'

- name: Save files to tmp/pgupgrade on Debian
  ansible.builtin.copy:
    src: "{{ old_pg_config_dir }}/{{ item }}"
    dest: "/tmp/pgupgrade/{{ item }}"
    mode: preserve
    remote_src: true
  become: true
  when:
    - "'standby' in group_names"
    - ansible_os_family == 'Debian'
  loop:
    - postgresql.conf
    - pg_hba.conf

- name: Run rsync command for pg_data on RedHat
  ansible.builtin.shell: >
    rsync {{ rsync_options }} {{ old_pg_data }} {{ new_pg_data }} {{ pg_owner }}@{{ standby_node }}:{{ base_pg_data }}
  args:
    executable: /bin/bash
    chdir: /
  become: true
  become_user: "{{ pg_owner }}"
  run_once: true
  loop: "{{ _standby_private_ip }}"
  loop_control:
    loop_var: standby_node
  when:
    - "'primary' in group_names"
    - ansible_os_family == 'RedHat'

- name: Run rsync command for pg_wal on RedHat
  ansible.builtin.shell: >
    rsync {{ rsync_options }} {{ old_pg_wal }} {{ new_pg_wal }} {{ pg_owner }}@{{ standby_node }}:{{ base_pg_wal}}
  args:
    executable: /bin/bash
    chdir: /
  become: true
  become_user: "{{ pg_owner }}"
  loop: "{{ _standby_private_ip }}"
  loop_control:
    loop_var: standby_node
  run_once: true
  when:
    - "'primary' in group_names"
    - new_pg_data not in new_pg_wal
    - base_pg_wal | length > 1
    - ansible_os_family == 'RedHat'

- name: Run rsync command for pg_data on Debian
  ansible.builtin.shell: >
    rsync {{ rsync_options }} {{ old_pg_config_dir }} {{ new_pg_config_dir }} {{ pg_owner }}@{{ standby_node }}:{{ base_pg_data }}
  args:
    executable: /bin/bash
    chdir: /
  become: true
  become_user: "{{ pg_owner }}"
  run_once: true
  loop: "{{ _standby_private_ip }}"
  loop_control:
    loop_var: standby_node
  when:
    - "'primary' in group_names"
    - ansible_os_family == 'Debian'

- name: Move files to new_pg_data directory on RedHat
  ansible.builtin.copy:
    src: "/tmp/pgupgrade/{{ item }}"
    dest: "{{ new_pg_data }}/{{ item }}"
    mode: preserve
    remote_src: true
  become: true
  when:
    - "'standby' in group_names"
    - ansible_os_family == 'RedHat'
  loop:
    - postgresql.conf
    - postgresql.auto.conf
    - pg_hba.conf

- name: Move files to new_pg_config_dir directory on Debian
  ansible.builtin.copy:
    src: "/tmp/pgupgrade/{{ item }}"
    dest: "{{ new_pg_config_dir }}/{{ item }}"
    mode: preserve
    remote_src: true
  become: true
  when:
    - "'standby' in group_names"
    - ansible_os_family == 'Debian'
  loop:
    - postgresql.conf
    - pg_hba.conf

- name: Move postgresql.auto.conf from tmp/pgupgrade to new_pg_data on Debian /tmp/pgupgrade/postgresql.auto.conf
  ansible.builtin.copy:
    src: /tmp/pgupgrade/postgresql.auto.conf
    dest: "{{ new_pg_data }}/postgresql.auto.conf"
    mode: preserve
    remote_src: true
  become: true
  when:
    - "'standby' in group_names"
    - ansible_os_family == 'Debian'

- name: Remove /tmp/pgupgrade
  ansible.builtin.file:
    path: /tmp/pgupgrade
    state: absent
  become: true
  when: "'standby' in group_names"

- name: Enable and start systemd service on primary
  ansible.builtin.systemd:
    name: "{{ new_pg_service }}"
    daemon_reload: true
    state: started
    enabled: true
  become: true
  when:
    - "'primary' in group_names"

- name: Enable and start systemd service on standby's
  ansible.builtin.systemd:
    name: "{{ new_pg_service }}"
    daemon_reload: true
    state: started
    enabled: true
  become: true
  when:
    - "'standby' in group_names"

- name: Reset variables
  ansible.builtin.set_fact:
    _standby_private_ip: ""
