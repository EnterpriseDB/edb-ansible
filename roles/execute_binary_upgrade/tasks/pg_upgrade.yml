---
## if edb_wait_states is not shut off, it will break the pg_upgrade command
## it will detect a user accessing the database and will abort upgrade
#- name: Shut down edb_wait_states if EPAS
#  ansible.builtin.include_role:
#    name: manage_dbserver
#    tasks_from: manage_postgres_params
#  vars:
#    pg_postgres_conf_params:
#      - name: edb_wait_states.enable_collection
#        value: "OFF"
#    pg_service: "{{ old_pg_service }}"
#    pg_unix_socket_directories: "{{ old_pg_unix_socket_directories }}"
#    pg_port: "{{ old_pg_port }}"
#  no_log: "{{ disable_logging }}"
#  when:
#    - pg_type == 'EPAS'
#    - _standby_private_ip|length > 0

- name: Stop old pg_service
  ansible.builtin.systemd:
    name: "{{ old_pg_service }}"
    state: stopped
    enabled: false
  become: true

- name: Stop new pg_service
  ansible.builtin.systemd:
    name: "{{ new_pg_service }}"
    state: stopped
  become: true

- name: Set link method if use_link_method
  ansible.builtin.set_fact:
    pg_upgrade_options: "{{ pg_upgrade_options + ' --link' }}"
  when: use_link_method

- name: Check the pg_upgrade compatibility
  ansible.builtin.shell: >
    {{ pg_upgrade_cmd }} {{ pg_upgrade_options }} --check
  args:
    executable: /bin/bash
  register: pg_upgrade_check
  become: true
  become_user: "{{ pg_owner }}"

- name: Check the clusters are comptabile
  ansible.builtin.fail:
    msg: "Clusters are not compatible. Check configuration settings provided
          {{ pg_upgrade_check.stdout_lines }}"
  when: '"*Clusters are compatible*" not in pg_upgrade_check.stdout_lines'

- name: Run pg_upgrade
  ansible.builtin.shell: >
    {{ pg_upgrade_cmd }} {{ pg_upgrade_options }}
  args:
    executable: /bin/bash
  register: pg_upgrade_execute
  become: true
  become_user: "{{ pg_owner }}"

- name: Show pg_upgrade output
  ansible.builtin.debug:
    var: pg_upgrade_execute
