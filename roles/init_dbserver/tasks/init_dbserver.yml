---

- name: Set the os variable
  set_fact:
    os: "{{ ansible_distribution | replace('RedHat', 'RHEL') }}{{ ansible_distribution_major_version }}"

- name: Reference pg_type variables
  include_vars: "{{ pg_type }}.yml"

- name: Reference ssl variables
  include_vars: edb-ssl.yml
  when: pg_ssl

- name: Check support for Operating System
  fail:
    msg: "Operating System = {{ os }} not supported."
  when: os not in supported_os

- name: Check supported versions for Database engine
  fail:
    msg: "Database Engine Version = {{ pg_version }} not supported.
          Supported versions are {{ supported_pg_version }}"
  when: pg_version|int not in supported_pg_version

- name: Set force_initdb based on the user input
  set_fact:
    force_initdb: "{{ hostvars[inventory_hostname].force_initdb }}"
  when: hostvars[inventory_hostname].force_initdb is defined
  register: output

- name: Force cleanup based on force_initdb
  block:
    - include_tasks: rm_initdb.yml
  when: force_initdb
  become: yes

- name: Gather the host and information for /etc/hosts
  set_fact:
    etc_hosts_lists: "{{ etc_hosts_lists + [node.private_ip + ' ' + node.hostname] }}"
  loop: "{{ lookup('pg_sr_cluster_nodes', wantlist=True) }}"
  loop_control:
    loop_var: node
  when: use_hostname

- name: Update etc_hosts based on use_hostname
  block:
    - import_tasks: linux_update_etc_hosts.yml
  become: yes
  when: use_hostname

- name: Check and configure the node as primary or pemserver
  block:
    - import_tasks: create_directories.yml
    - import_tasks: pg_initdb.yml
    - import_tasks: pg_set_superuser_password.yml
  become: yes

- name: Configure ssl based on pg_ssl parameter
  block:
    - import_tasks: pg_ssl_check.yml
    - import_tasks: pg_ssl_config.yml
  become: yes
  when:
     - pg_ssl

- name: Reset force_initdb based on the user input
  set_fact:
    force_initdb: false
    etc_hosts_lists: []
