---
- name: Check if we have PG_VERSION in pg_data
  stat:
    path: "{{ pg_data }}/PG_VERSION"
  become: true
  register: pg_version_stat

- name: Verify pg_wal and accordingly add in initdb
  set_fact:
    pg_initdb_options: "{{ pg_initdb_options + ' --waldir=' + pg_wal }}"
  when: pg_wal|length > 0  and not pg_data in pg_wal

- name: Initialize database service
  when: not pg_version_stat.stat.exists
  become: true
  block:
    - name: Initialize database postgres service in RedHat
      ansible.builtin.command: >
        {{ pg_initdb }} {{ pg_initdb_options }} -D {{ pg_data }}
      when: ansible_os_family == 'RedHat'
      become: true
      become_user: "{{ pg_owner }}"

    - name: Initialize database postgres service in Debian
      ansible.builtin.command: >
        {{ pg_initdb }} {{ pg_initdb_options }} -D {{ pg_data }}
      when: ansible_os_family == 'Debian'
      become: true
      become_user: "{{ pg_owner }}"

    - name: Copy the postgresql.conf.template to the server
      template:
        src: postgresql.conf.template
        dest: "{{ pg_data }}/postgresql.auto.conf"
        owner: "{{ pg_owner }}"
        group: "{{ pg_group }}"
        mode: 0600

- name: Enable and start systemd service
  ansible.builtin.systemd:
    name: "{{ pg_service }}"
    daemon_reload: true
    state: started
    enabled: true
    no_block: false
  when: not ansible_module_running_in_container
  become: true

- name: Start pg service in container
  ansible.builtin.command: >
    {{ pg_bin_path }}/pg_ctl -D {{ pg_default_data }} start
  when: ansible_module_running_in_container
  become: true
  become_user: "{{ pg_owner }}"
