---

- name: Check if we have PG_VERSION in pg_data
  stat:
    path: "{{ pg_data }}/PG_VERSION"
  become: yes
  register: pg_version_stat

- name: Verify pg_wal and accordingly add the in the initdb
  set_fact:
    pg_initdb_options: "{{ pg_initdb_options + ' --waldir=' + pg_wal }}"
  when: pg_wal|length > 0  and not pg_data in pg_wal

- name: Initialize database postgres service
  shell: |
    export PGSETUP_INITDB_OPTIONS="{{ pg_initdb_options }}"
    {{ pg_initdb }}
  args:
    creates: "{{ pg_data }}/PG_VERSION"
  become: yes

- name: Copy the postgresql.conf.template to the server
  template:
    src: postgresql.conf.template
    dest: "{{ pg_data }}/postgresql.auto.conf"
    owner: "{{ pg_owner }}"
    group: "{{ pg_group }}"
    mode: 0600
  when:  not pg_version_stat.stat.exists
  become: yes

- name: Start the pg_service
  systemd:
    name: "{{ pg_service }}"
    daemon_reload: yes
    state: started
  become: yes

- name: Perform a immediate checkpoint after initializing the cluster
  include_role:
    name: manage_dbserver
    tasks_from: execute_sql_scripts
  vars:
    pg_query:
      - query: "CHECKPOINT"
        db: "postgres"
  no_log: "{{ disable_logging }}"
  when:  not pg_version_stat.stat.exists
