---
- name: Check if we have PG_VERSION in pg_data
  ansible.builtin.stat:
    path: "{{ pg_data }}/PG_VERSION"
  become: true
  register: pg_version_stat

- name: Verify pg_wal and accordingly add in initdb
  ansible.builtin.set_fact:
    pg_initdb_options: "{{ pg_initdb_options + ' --waldir=' + pg_wal }}"
  when: pg_wal|length > 0  and not pg_data in pg_wal

- name: Initialize database postgres service
  ansible.builtin.shell: >
    {{ pg_initdb }} {{ pg_service }}
  args:
    executable: /bin/bash
    creates: "{{ pg_data }}/PG_VERSION"
  environment:
    PGSETUP_INITDB_OPTIONS: "{{ pg_initdb_options }}"
  when: ansible_os_family == 'RedHat'
  become: true

- name: Initialize database postgres service
  ansible.builtin.shell: >
    {{ pg_initdb }}
  args:
    executable: /bin/bash
    creates: "{{ pg_data }}/PG_VERSION"
  environment:
    PGSETUP_INITDB_OPTIONS: "{{ pg_initdb_options }}"
  when: ansible_os_family == 'Debian'
  become: true

- name: Copy the postgresql.conf.template to the server
  ansible.builtin.template:
    src: postgresql.conf.template
    dest: "{{ pg_data }}/postgresql.auto.conf"
    owner: "{{ pg_owner }}"
    group: "{{ pg_group }}"
    mode: 0600
  when: not pg_version_stat.stat.exists
  become: true

- name: Enable and start systemd service
  ansible.builtin.systemd:
    name: "{{ pg_service }}"
    daemon_reload: true
    state: started
    enabled: true
  become: true
