---
- name: Init pgpool2_users_lines
  ansible.builtin.set_fact:
    pgpool2_users_lines: []

- name: Build pgpool2_users_lines
  ansible.builtin.set_fact:
    pgpool2_users_lines: >
      {{ pgpool2_users_lines | default([]) + [
        {
          'line': item.name,
          'regexp': '^' + item.name | regex_escape() + '\:',
          'state': 'absent'
        }
      ] }}
  loop: "{{ pgpool2_users }}"
  when:
    - item.state is defined
    - item.state == 'absent'

- name: Remove users from pool_passwd
  edb_devops.edb_postgres.linesinfile:
    path: "{{ pgpool2_pool_passwd_file }}"
    lines: "{{ pgpool2_users_lines }}"
  when:
    - pgpool2_users_lines|length > 0
  become: true

- name: Reset pgpool2_users_lines
  ansible.builtin.set_fact:
    pgpool2_users_lines: []

- name: Add users with SCRAM authentication
  ansible.builtin.command:
    cmd: >-
      script -q -c '{{ pgpool2_bin_path }}/pg_enc -k ~/.pgpoolkey -f {{ pgpool2_configuration_file }} -u {{ user_item.name }} -p -m'
    stdin: "{{ user_item.pass }}"
  become: true
  become_user: "{{ pgpool2_user }}"
  loop: "{{ pgpool2_users }}"
  loop_control:
    loop_var: user_item
  when:
    - pgpool2_users|length > 0
    - user_item.state is not defined or user_item.state == 'present'
    - user_item.auth == 'scram'

- name: Add users with MD5 authentication
  ansible.builtin.command:
    cmd: >-
      script -q -c '{{ pgpool2_bin_path }}/pg_md5 -f {{ pgpool2_configuration_file }} -u {{ user_item.name }} -p -m'
    stdin: "{{ user_item.pass }}"
  become: true
  become_user: "{{ pgpool2_user }}"
  loop: "{{ pgpool2_users }}"
  loop_control:
    loop_var: user_item
  when:
    - pgpool2_users|length > 0
    - user_item.state is not defined or user_item.state == 'present'
    - user_item.auth == 'md5'
